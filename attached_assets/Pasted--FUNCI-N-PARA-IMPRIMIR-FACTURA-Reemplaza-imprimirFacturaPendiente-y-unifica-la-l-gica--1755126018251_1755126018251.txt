// ===== FUNCI√ìN PARA IMPRIMIR FACTURA (Reemplaza imprimirFacturaPendiente y unifica la l√≥gica) =====
async function imprimirFactura(facturaId) {
    try {
        console.log('üñ®Ô∏è === IMPRIMIENDO FACTURA ===');
        console.log('üñ®Ô∏è Factura ID:', facturaId);

        if (!facturaId) {
            console.error('‚ùå ID de factura no v√°lido para impresi√≥n:', facturaId);
            if (typeof mostrarToast === 'function') {
                mostrarToast('Error', 'ID de factura no v√°lido', 'danger');
            }
            return;
        }

        if (typeof mostrarToast === 'function') {
            mostrarToast('Imprimiendo', 'Generando recibo de factura...', 'info');
        }

        const response = await fetch(`/Facturacion/ObtenerDetalleFactura?facturaId=${facturaId}`, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        });

        if (!response.ok) {
            throw new Error(`Error ${response.status}: ${response.statusText}`);
        }

        const result = await response.json();

        if (result.success && result.factura) {
            const factura = result.factura;
            console.log('üìã Datos de factura obtenidos para impresi√≥n:', factura);

            // Usar la funci√≥n de re-impresi√≥n existente en facturacion.js
            if (typeof window.reimprimirFacturaDesdeModal === 'function') {
                console.log('üñ®Ô∏è Usando funci√≥n de re-impresi√≥n existente');
                await window.reimprimirFacturaDesdeModal(facturaId, factura.numeroFactura);
            } else if (typeof reimprimirFacturaDesdeModal === 'function') {
                console.log('üñ®Ô∏è Usando funci√≥n de re-impresi√≥n global');
                await reimprimirFacturaDesdeModal(facturaId, factura.numeroFactura);
            } else if (typeof generarReciboTermico === 'function') {
                console.log('üñ®Ô∏è Usando funci√≥n de impresi√≥n t√©rmica');

                const datosFactura = {
                    numeroFactura: factura.numeroFactura,
                    nombreCliente: factura.nombreCliente,
                    usuarioCreadorNombre: factura.usuarioCreadorNombre
                };

                const productos = factura.detallesFactura || [];
                const totales = {
                    subtotal: factura.subtotal || 0,
                    iva: factura.montoImpuesto || 0,
                    total: factura.total || 0,
                    metodoPago: factura.metodoPago || 'Efectivo',
                    cliente: { nombre: factura.nombreCliente },
                    usuario: { nombre: factura.usuarioCreadorNombre }
                };

                generarReciboTermico(datosFactura, productos, totales);

                if (typeof mostrarToast === 'function') {
                    mostrarToast('√âxito', 'Recibo de factura enviado a impresora', 'success');
                }
            } else {
                console.error('‚ùå Sistema de impresi√≥n no disponible');
                if (typeof mostrarToast === 'function') {
                    mostrarToast('Error', 'Sistema de impresi√≥n no disponible', 'danger');
                }
            }

        } else {
            throw new Error(result.message || 'No se pudieron obtener los datos de la factura');
        }

    } catch (error) {
        console.error('‚ùå Error imprimiendo factura:', error);

        if (typeof mostrarToast === 'function') {
            mostrarToast('Error', 'No se pudo imprimir la factura: ' + error.message, 'danger');
        } else {
            alert('Error imprimiendo factura: ' + error.message);
        }
    }
}
