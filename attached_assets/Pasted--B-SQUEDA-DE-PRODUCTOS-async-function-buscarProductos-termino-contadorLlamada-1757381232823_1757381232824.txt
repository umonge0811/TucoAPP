// ===== B√öSQUEDA DE PRODUCTOS =====
async function buscarProductos(termino) {
    contadorLlamadasBusqueda++;
    console.log('üîç === INICIO buscarProductos ===');
    console.log('üîç CONTADOR DE LLAMADAS:', contadorLlamadasBusqueda);
    console.log('üîç T√©rmino recibido:', `"${termino}"`);
    console.log('üîç busquedaEnProceso:', busquedaEnProceso);
    console.log('üîç ultimaBusqueda:', `"${ultimaBusqueda}"`);

    // ‚úÖ PERMITIR INTERRUMPIR B√öSQUEDAS PARA CAMPO VAC√çO
    if (busquedaEnProceso && termino.length > 0) {
        console.log('‚è∏Ô∏è B√∫squeda ya en proceso, omitiendo llamada duplicada');
        return;
    }

    // ‚úÖ PREVENIR B√öSQUEDAS DUPLICADAS SOLO SI NO ES FORZADA
    if (termino === ultimaBusqueda && cargaInicialCompletada && window.lastProductsHash) {
        console.log('‚è∏Ô∏è B√∫squeda duplicada del mismo t√©rmino omitida:', termino);
        return;
    }

    try {
        console.log('üîç Iniciando b√∫squeda v√°lida...');
        busquedaEnProceso = true;
        ultimaBusqueda = termino;

        // ‚úÖ NO MOSTRAR LOADING PARA PREVENIR PARPADEO - El contenido se actualiza solo si hay cambios reales

        const response = await fetch('/Facturacion/ObtenerProductosParaFacturacion', {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Error del servidor:', errorText);
            throw new Error(`Error ${response.status}: ${response.statusText}`);
        }

        const data = await response.json();
        console.log('üìã Respuesta del servidor recibida');

        if (data && data.productos) {
            console.log(`‚úÖ Se encontraron ${data.productos.length} productos disponibles`);

            // ‚úÖ FILTRAR PRODUCTOS SEG√öN EL T√âRMINO DE B√öSQUEDA (si es necesario)
            let productosFiltrados = data.productos;
            if (termino && termino.length >= 2) {
                const terminoBusqueda = termino.toLowerCase();
                productosFiltrados = data.productos.filter(producto => {
                    const nombre = (producto.nombreProducto || producto.nombre || '').toLowerCase();
                    const descripcion = (producto.descripcion || producto.Descripcion || '').toLowerCase();

                    // ‚úÖ BUSCAR EN NOMBRE Y DESCRIPCI√ìN
                    let cumpleBusqueda = nombre.includes(terminoBusqueda) || descripcion.includes(terminoBusqueda);

                    // ‚úÖ BUSCAR EN MEDIDAS DE LLANTAS (TODOS LOS FORMATOS SIN REQUERIR R)
                    if (!cumpleBusqueda && (producto.llanta || (producto.Llanta && producto.Llanta.length > 0))) {
                        try {
                            const llantaInfo = producto.llanta || producto.Llanta[0];

                            if (llantaInfo && llantaInfo.ancho && llantaInfo.diametro) {
                                const ancho = llantaInfo.ancho;
                                const perfil = llantaInfo.perfil || '';
                                const diametro = llantaInfo.diametro;

                                // Crear TODOS los formatos de medida para b√∫squeda
                                const formatosBusqueda = [
                                    // Formato original con R
                                    `${ancho}/${perfil}/R${diametro}`,
                                    `${ancho}/R${diametro}`,

                                    // Formatos sin R - ESTOS SON LOS PRINCIPALES
                                    `${ancho}/${perfil}/${diametro}`,  // 225/50/15
                                    `${ancho}-${perfil}-${diametro}`,  // 225-50-15
                                    `${ancho}-${perfil}/${diametro}`,  // 225-50/15
                                    `${ancho}x${perfil}x${diametro}`,  // 225x50x15
                                    `${ancho} ${perfil} ${diametro}`,  // 225 50 15

                                    // Formatos adicionales sin perfil
                                    `${ancho}/${diametro}`,
                                    `${ancho}-${diametro}`,
                                    `${ancho}x${diametro}`,
                                    `${ancho} ${diametro}`,

                                    // Componentes individuales
                                    `${ancho}`,
                                    `${perfil}`,
                                    `${diametro}`,

                                    // Solo el diametro con R para compatibilidad
                                    `R${diametro}`
                                ];

                                // Crear texto de b√∫squeda unificado
                                const textoBusquedaLlanta = formatosBusqueda
                                    .filter(formato => formato && formato.trim() !== '')
                                    .join(' ')
                                    .toLowerCase();

                                cumpleBusqueda = textoBusquedaLlanta.includes(terminoBusqueda);
                            }
                        } catch (error) {
                            console.warn('‚ö†Ô∏è Error procesando medida de llanta para b√∫squeda:', error);
                        }
                    }

                    // ‚úÖ BUSCAR EN PROPIEDADES ALTERNATIVAS DE MEDIDAS
                    if (!cumpleBusqueda && (producto.Ancho || producto.Diametro || producto.Perfil)) {
                        try {
                            const ancho = producto.Ancho || '';
                            const perfil = producto.Perfil || '';
                            const diametro = producto.Diametro || '';

                            // Todos los formatos alternativos sin requerir R
                            const formatosAlternativos = [
                                // Con R (compatibilidad)
                                `${ancho}/${perfil}/R${diametro}`,
                                `${ancho}/R${diametro}`,

                                // Sin R - FORMATOS PRINCIPALES
                                `${ancho}/${perfil}/${diametro}`,  // 225/50/15
                                `${ancho}-${perfil}-${diametro}`,  // 225-50-15
                                `${ancho}-${perfil}/${diametro}`,  // 225-50/15
                                `${ancho}x${perfil}x${diametro}`,  // 225x50x15
                                `${ancho} ${perfil} ${diametro}`,  // 225 50 15

                                // Sin perfil
                                `${ancho}/${diametro}`,
                                `${ancho}-${diametro}`,
                                `${ancho}x${diametro}`,
                                `${ancho} ${diametro}`,

                                // Individuales
                                `${ancho}`, `${perfil}`, `${diametro}`, `R${diametro}`
                            ];

                            const medidaAlternativa = formatosAlternativos
                                .filter(formato => formato && formato.trim() !== '')
                                .join(' ')
                                .toLowerCase();

                            cumpleBusqueda = medidaAlternativa.includes(terminoBusqueda);
                        } catch (error) {
                            console.warn('‚ö†Ô∏è Error procesando medidas alternativas:', error);
                        }
                    }

                    return cumpleBusqueda;
                });
                console.log(`üîç Productos filtrados por t√©rmino "${termino}" (incluyendo medidas): ${productosFiltrados.length}`);
            }

            mostrarResultadosProductos(productosFiltrados);

            // ‚úÖ MARCAR CARGA INICIAL COMO COMPLETADA SI ES UNA B√öSQUEDA VAC√çA (PRIMERA CARGA)
            if (termino === '' && !cargaInicialCompletada) {
                cargaInicialCompletada = true;
                console.log('üì¶ Carga inicial marcada como completada despu√©s de primera b√∫squeda exitosa');
            }

            console.log('üì¶ Productos mostrados exitosamente');
        } else {
            const errorMessage = data.message || 'Error desconocido al obtener productos';
            console.error('‚ùå Error en la respuesta:', errorMessage);
            mostrarResultadosProductos([]);
            mostrarToast('Error', errorMessage, 'danger');
        }

    } catch (error) {
        console.error('‚ùå Error buscando productos:', error);
        mostrarErrorBusqueda('productos', error.message);
    } finally {
        busquedaEnProceso = false;
        console.log('üîç === FIN buscarProductos ===');
    }
}
