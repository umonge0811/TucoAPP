
using GestionLlantera.Web.Services;
using GestionLlantera.Web.Services.Interfaces;

namespace GestionLlantera.Web.Middleware
{
    public class PermisosRefreshMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<PermisosRefreshMiddleware> _logger;

        public PermisosRefreshMiddleware(RequestDelegate next, ILogger<PermisosRefreshMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext context, IPermisosService permisosService)
        {
            try
            {
                // Solo verificar en p√°ginas que requieren autenticaci√≥n
                if (context.User?.Identity?.IsAuthenticated == true)
                {
                    _logger.LogDebug("üîç Usuario autenticado detectado - verificando permisos...");
                    
                    // ‚úÖ DIAGN√ìSTICO: Verificar informaci√≥n del usuario
                    var userId = context.User.FindFirst("userId")?.Value ?? 
                                context.User.FindFirst("UsuarioId")?.Value ?? 
                                context.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                    
                    var userEmail = context.User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value ?? 
                                   context.User.FindFirst("email")?.Value;
                    
                    var userRoles = context.User.Claims.Where(c => c.Type == System.Security.Claims.ClaimTypes.Role)
                                                     .Select(c => c.Value).ToList();

                    _logger.LogInformation("üë§ Usuario detectado - ID: {UserId}, Email: {Email}, Roles: [{Roles}]", 
                        userId, userEmail, string.Join(", ", userRoles));

                    // ‚úÖ DIAGN√ìSTICO: Verificar cookies
                    var jwtCookie = context.Request.Cookies["JwtToken"];
                    _logger.LogDebug("üç™ Cookie JwtToken presente: {Present}, Longitud: {Length}", 
                        !string.IsNullOrEmpty(jwtCookie), jwtCookie?.Length ?? 0);

                    // ‚úÖ VERIFICAR SI NECESITA ACTUALIZACI√ìN DE PERMISOS
                    if (permisosService is PermisosService ps)
                    {
                        // Verificar renovaci√≥n normal
                        if (ps.NecesitaRenovacion())
                        {
                            _logger.LogDebug("üîÑ Permisos necesitan renovaci√≥n por tiempo - forzando refresh");
                            await permisosService.RefrescarPermisosAsync();
                        }
                        // Tambi√©n verificar actualizaci√≥n basada en timestamp
                        else if (ps.NecesitaActualizacionPermisos())
                        {
                            _logger.LogDebug("üîÑ Permisos necesitan actualizaci√≥n por timestamp - forzando refresh");
                            await permisosService.RefrescarPermisosAsync();
                        }
                        else
                        {
                            _logger.LogDebug("‚úÖ Permisos est√°n actualizados");
                        }

                        // ‚úÖ DIAGN√ìSTICO: Verificar permisos actuales
                        var permisosActuales = ps.PermisosActuales;
                        _logger.LogInformation("üìã Permisos actuales del usuario: Admin={Admin}, VerCostos={VerCostos}, EditarProductos={EditarProductos}", 
                            permisosActuales.EsAdministrador, permisosActuales.PuedeVerCostos, permisosActuales.PuedeEditarProductos);
                    }

                    // Verificar si hay un par√°metro especial para forzar refresh
                    if (context.Request.Query.ContainsKey("refresh_permisos"))
                    {
                        _logger.LogInformation("Refresh de permisos solicitado v√≠a query parameter");
                        permisosService.LimpiarCacheCompleto();
                        await permisosService.RefrescarPermisosAsync();
                        
                        // Redirigir sin el par√°metro para limpiar la URL
                        var newUrl = context.Request.Path.Value;
                        context.Response.Redirect(newUrl);
                        return;
                    }
                }
                else
                {
                    _logger.LogDebug("‚ùå Usuario no autenticado o no presente");
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error cr√≠tico en PermisosRefreshMiddleware");
                // Continuar con la ejecuci√≥n normal en caso de error
            }

            await _next(context);
        }
    }
}
