/**
 * Generar e imprimir recibo para factura completada (reutilizando l√≥gica existente)
 */
function generarReciboFacturaCompletada(resultadoFactura, productos, metodoPago) {
    try {
        console.log('üñ®Ô∏è === GENERANDO RECIBO PARA FACTURA COMPLETADA ===');
        console.log('üñ®Ô∏è Resultado factura:', resultadoFactura);
        console.log('üñ®Ô∏è Productos:', productos);
        console.log('üñ®Ô∏è M√©todo de pago:', metodoPago);
        console.log('üñ®Ô∏è Factura pendiente actual:', facturaPendienteActual);
        console.log('üñ®Ô∏è Factura preservada para recibo:', window.facturaParaRecibo);

        // ‚úÖ EXTRACCI√ìN MEJORADA DEL N√öMERO DE FACTURA CON M√öLTIPLES FUENTES
        let numeroFactura = 'N/A';
        let nombreCliente = 'Cliente General';
        let usuarioCreadorNombre = 'Sistema';
        
        // ‚úÖ PRIORIZAR INFORMACI√ìN DE FACTURA PENDIENTE ACTUAL
        if (facturaPendienteActual && facturaPendienteActual.numeroFactura) {
            numeroFactura = facturaPendienteActual.numeroFactura;
            nombreCliente = facturaPendienteActual.nombreCliente || facturaPendienteActual.NombreCliente || nombreCliente;
            usuarioCreadorNombre = facturaPendienteActual.usuarioCreadorNombre || facturaPendienteActual.UsuarioCreadorNombre || usuarioCreadorNombre;
            console.log('üñ®Ô∏è Datos desde facturaPendienteActual:', { numeroFactura, nombreCliente, usuarioCreadorNombre });
        }
        // Prioridad 2: Desde informaci√≥n preservada
        else if (window.facturaParaRecibo && window.facturaParaRecibo.numeroFactura) {
            numeroFactura = window.facturaParaRecibo.numeroFactura;
            nombreCliente = window.facturaParaRecibo.nombreCliente || nombreCliente;
            usuarioCreadorNombre = window.facturaParaRecibo.usuarioCreadorNombre || usuarioCreadorNombre;
            console.log('üñ®Ô∏è Datos desde informaci√≥n preservada:', { numeroFactura, nombreCliente, usuarioCreadorNombre });
        }
        // Prioridad 3: Desde resultadoFactura (respuesta del servidor)
        else if (resultadoFactura && resultadoFactura.numeroFactura) {
            numeroFactura = resultadoFactura.numeroFactura;
            nombreCliente = resultadoFactura.nombreCliente || nombreCliente;
            usuarioCreadorNombre = resultadoFactura.usuarioCreadorNombre || usuarioCreadorNombre;
            console.log('üñ®Ô∏è Datos desde resultadoFactura:', { numeroFactura, nombreCliente, usuarioCreadorNombre });
        }
        // Prioridad 4: Desde resultadoFactura.data
        else if (resultadoFactura && resultadoFactura.data && resultadoFactura.data.numeroFactura) {
            numeroFactura = resultadoFactura.data.numeroFactura;
            nombreCliente = resultadoFactura.data.nombreCliente || nombreCliente;
            usuarioCreadorNombre = resultadoFactura.data.usuarioCreadorNombre || usuarioCreadorNombre;
            console.log('üñ®Ô∏è Datos desde resultadoFactura.data:', { numeroFactura, nombreCliente, usuarioCreadorNombre });
        }
        // Prioridad 5: Desde los productos si tienen facturaId
        else if (productos && productos.length > 0 && productos[0].facturaId) {
            numeroFactura = `FAC-${productos[0].facturaId}`;
            console.log('üñ®Ô∏è N√∫mero de factura generado desde facturaId:', numeroFactura);
        }

        // ‚úÖ COMPLETAR INFORMACI√ìN FALTANTE CON CLIENTE SELECCIONADO Y USUARIO ACTUAL
        if (nombreCliente === 'Cliente General' && clienteSeleccionado) {
            nombreCliente = clienteSeleccionado.nombre || 
                           clienteSeleccionado.nombreCliente || 
                           clienteSeleccionado.NombreCliente || 
                           'Cliente General';
            console.log('üñ®Ô∏è Nombre cliente completado desde clienteSeleccionado:', nombreCliente);
        }

        if (usuarioCreadorNombre === 'Sistema') {
            const usuarioActual = obtenerUsuarioActual();
            usuarioCreadorNombre = usuarioActual?.nombre || 
                                  usuarioActual?.nombreUsuario || 
                                  usuarioActual?.NombreUsuario || 
                                  'Sistema';
            console.log('üñ®Ô∏è Usuario creador completado desde usuarioActual:', usuarioCreadorNombre);
        }

        console.log('üñ®Ô∏è Informaci√≥n final determinada:', { numeroFactura, nombreCliente, usuarioCreadorNombre });

        // Calcular totales bas√°ndose en los productos del carrito
        const configMetodo = CONFIGURACION_PRECIOS[metodoPago] || CONFIGURACION_PRECIOS['efectivo'];
        
        let subtotal = 0;
        productos.forEach(producto => {
            const precioAjustado = producto.precioUnitario * configMetodo.multiplicador;
            subtotal += precioAjustado * producto.cantidad;
        });

        const iva = subtotal * 0.13;
        const total = subtotal + iva;

        // ‚úÖ CREAR OBJETO DE DATOS COMPLETO PARA EL RECIBO
        const datosRecibo = {
            numeroFactura: numeroFactura,
            nombreCliente: nombreCliente,
            usuarioCreadorNombre: usuarioCreadorNombre
        };

        const totalesRecibo = {
            subtotal: subtotal,
            iva: iva,
            total: total,
            metodoPago: metodoPago,
            cliente: {
                nombre: nombreCliente,
                nombreCliente: nombreCliente
            },
            usuario: {
                nombre: usuarioCreadorNombre,
                nombreUsuario: usuarioCreadorNombre
            }
        };

        console.log('üñ®Ô∏è Datos del recibo preparados:', {
            datosRecibo,
            cantidadProductos: productos.length,
            totalCalculado: total,
            numeroFactura: numeroFactura,
            cliente: nombreCliente,
            usuario: usuarioCreadorNombre
        });

        // ‚úÖ LLAMAR A LA FUNCI√ìN DE GENERACI√ìN DE RECIBOS CON DATOS COMPLETOS
        generarRecibo(datosRecibo, productos, totalesRecibo);

        // ‚úÖ LIMPIAR INFORMACI√ìN PRESERVADA DESPU√âS DE USAR
        if (window.facturaParaRecibo) {
            console.log('üßπ Limpiando informaci√≥n preservada de factura');
            delete window.facturaParaRecibo;
        }

        console.log('‚úÖ Recibo de factura completada generado exitosamente');
        console.log('‚úÖ N√∫mero:', numeroFactura);
        console.log('‚úÖ Cliente:', nombreCliente);
        console.log('‚úÖ Cajero:', usuarioCreadorNombre);

    } catch (error) {
        console.error('‚ùå Error generando recibo para factura completada:', error);
        // Mostrar error espec√≠fico al usuario
        Swal.fire({
            icon: 'warning',
            title: 'Recibo no impreso',
            text: 'La factura se complet√≥ correctamente pero no se pudo imprimir el recibo autom√°ticamente',
            confirmButtonText: 'Entendido',
            timer: 4000,
            timerProgressBar: true
        });
    }
}
