/**
 * Procesar factura pendiente usando el modal de finalizaci√≥n ANTERIOR 
 */
async function procesarFacturaPendiente(facturaEscapada) {
    try {
        // ‚úÖ CERRAR MODAL DE FACTURAS PENDIENTES INMEDIATAMENTE
        const modalFacturasPendientes = bootstrap.Modal.getInstance(document.getElementById('facturasPendientesModal'));
        if (modalFacturasPendientes) {
            modalFacturasPendientes.hide();
            console.log('üö™ Modal de facturas pendientes cerrado al inicio del procesamiento');
        }

        // ‚úÖ PEQUE√ëO DELAY PARA ASEGURAR QUE EL MODAL SE CIERRE COMPLETAMENTE
        await new Promise(resolve => setTimeout(resolve, 300));

        console.log('üí∞ === PROCESANDO FACTURA PENDIENTE ===');
        console.log('üí∞ Factura escapada recibida:', facturaEscapada);

        // ‚úÖ DESERIALIZAR FACTURA (manejo robusto para ambos formatos)
        let factura;
        if (typeof facturaEscapada === 'string') {
            // Si es cadena, verificar si est√° escapada
            if (facturaEscapada.includes('&quot;')) {
                factura = JSON.parse(facturaEscapada.replace(/&quot;/g, '"'));
            } else {
                factura = JSON.parse(facturaEscapada);
            }
        } else if (typeof facturaEscapada === 'object' && facturaEscapada !== null) {
            // Si ya es un objeto, usarlo directamente
            factura = facturaEscapada;
        } else {
            throw new Error('Formato de factura no v√°lido');
        }

        console.log('üí∞ Factura deserializada:', factura);

        // ‚úÖ MARCAR COMO FACTURA PENDIENTE PARA EL MODAL
        facturaPendienteActual = {
            ...factura,
            esFacturaPendiente: true  // ‚úÖ AGREGAR ESTA PROPIEDAD
        };

        // Verificar permisos
        if (!permisosUsuario.puedeCompletarFacturas) {
            throw new Error('No tienes permisos para completar facturas');
        }

        // ‚úÖ VERIFICAR STOCK ANTES DE PROCESAR
        console.log('üì¶ Verificando stock de la factura...');
        const verificacionStock = await verificarStockFacturaPendiente(factura.facturaId);
        console.log('üì¶ Resultado verificaci√≥n stock:', verificacionStock);

        if (!verificacionStock.success) {
            throw new Error(verificacionStock.message || 'Error verificando stock');
        }

        if (verificacionStock.tieneProblemas && verificacionStock.productosConProblemas.length > 0) {
            console.log('‚ö†Ô∏è Se encontraron problemas de stock:', verificacionStock.productosConProblemas);

            // ‚úÖ LIMPIAR CARRITO ANTES DE CARGAR FACTURA PENDIENTE
            productosEnVenta = [];
            clienteSeleccionado = null;

            // ‚úÖ ESTABLECER FACTURA PENDIENTE ACTUAL
            facturaPendienteActual = {
                ...factura,
                esFacturaPendiente: true
            };

            // ‚úÖ CARGAR PRODUCTOS DE LA FACTURA EN EL CARRITO
            if (factura.detallesFactura && Array.isArray(factura.detallesFactura)) {
                factura.detallesFactura.forEach(detalle => {
                    productosEnVenta.push({
                        productoId: detalle.productoId,
                        nombreProducto: detalle.nombreProducto,
                        precioUnitario: detalle.precioUnitario,
                        cantidad: detalle.cantidad,
                        stockDisponible: detalle.stockDisponible || 999,
                        facturaId: factura.facturaId,
                        metodoPago: 'efectivo'
                    });
                });
            }

            // ‚úÖ CARGAR CLIENTE DE LA FACTURA
            clienteSeleccionado = {
                clienteId: factura.clienteId,
                nombre: factura.nombreCliente || factura.NombreCliente,
                identificacion: factura.identificacionCliente || factura.IdentificacionCliente,
                telefono: factura.telefonoCliente || factura.TelefonoCliente,
                email: factura.emailCliente || factura.EmailCliente,
                direccion: factura.direccionCliente || factura.DireccionCliente
            };

            // ‚úÖ ACTUALIZAR INTERFAZ
            $('#clienteBusqueda').val(clienteSeleccionado.nombre);
            $('#nombreClienteSeleccionado').text(clienteSeleccionado.nombre);
            $('#emailClienteSeleccionado').text(clienteSeleccionado.email || 'Sin email');
            $('#clienteSeleccionado').removeClass('d-none');

            actualizarVistaCarrito();
            actualizarTotales();
            actualizarEstadoBotonFinalizar();

            // ‚úÖ GUARDAR PRODUCTOS PENDIENTES GLOBALMENTE
            window.productosPendientesEntrega = verificacionStock.productosConProblemas;

            // ‚úÖ MOSTRAR MODAL DE PROBLEMAS DE STOCK
            mostrarModalProblemasStock(verificacionStock.productosConProblemas, factura);

        } else {
            // ‚úÖ NO HAY PROBLEMAS DE STOCK - PROCESAR DIRECTAMENTE
            console.log('‚úÖ No hay problemas de stock, procesando factura directamente');

            // ‚úÖ LIMPIAR CARRITO ANTES DE CARGAR FACTURA PENDIENTE
            productosEnVenta = [];
            clienteSeleccionado = null;

            // ‚úÖ CARGAR PRODUCTOS DE LA FACTURA EN EL CARRITO
            if (factura.detallesFactura && Array.isArray(factura.detallesFactura)) {
                factura.detallesFactura.forEach(detalle => {
                    productosEnVenta.push({
                        productoId: detalle.productoId,
                        nombreProducto: detalle.nombreProducto,
                        precioUnitario: detalle.precioUnitario,
                        cantidad: detalle.cantidad,
                        stockDisponible: detalle.stockDisponible || 999,
                        facturaId: factura.facturaId,
                        metodoPago: 'efectivo'
                    });
                });
            }

            // ‚úÖ CARGAR CLIENTE DE LA FACTURA
            clienteSeleccionado = {
                clienteId: factura.clienteId,
                nombre: factura.nombreCliente || factura.NombreCliente,
                identificacion: factura.identificacionCliente || factura.IdentificacionCliente,
                telefono: factura.telefonoCliente || factura.TelefonoCliente,
                email: factura.emailCliente || factura.EmailCliente,
                direccion: factura.direccionCliente || factura.DireccionCliente
            };

            // ‚úÖ ACTUALIZAR INTERFAZ
            $('#clienteBusqueda').val(clienteSeleccionado.nombre);
            $('#nombreClienteSeleccionado').text(clienteSeleccionado.nombre);
            $('#emailClienteSeleccionado').text(clienteSeleccionado.email || 'Sin email');
            $('#clienteSeleccionado').removeClass('d-none');

            actualizarVistaCarrito();
            actualizarTotales();
            actualizarEstadoBotonFinalizar();

            // ‚úÖ ABRIR MODAL DE FINALIZAR VENTA DIRECTAMENTE
            setTimeout(() => {
                mostrarModalFinalizarVenta();
            }, 500);
        }

    } catch (error) {
        console.error('‚ùå Error procesando factura pendiente:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error procesando factura',
            text: error.message || 'Hubo un problema procesando la factura pendiente',
            confirmButtonColor: '#dc3545'
        });
    }
}
