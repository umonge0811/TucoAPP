/**
 * Procesar factura pendiente usando el modal de finalizaci√≥n
 */
async function procesarFacturaPendiente(facturaEscapada) {
    try {


        console.log('üí∞ === PROCESANDO FACTURA PENDIENTE ===');
        console.log('üí∞ Factura escapada recibida:', facturaEscapada);

        // ‚úÖ DESERIALIZAR FACTURA (manejo robusto para ambos formatos)
        let factura;
        if (typeof facturaEscapada === 'string') {
            // Si es cadena, verificar si est√° escapada
            if (facturaEscapada.includes('&quot;')) {
                factura = JSON.parse(facturaEscapada.replace(/&quot;/g, '"'));
            } else {
                factura = JSON.parse(facturaEscapada);
            }
        } else if (typeof facturaEscapada === 'object' && facturaEscapada !== null) {
            // Si ya es un objeto, usarlo directamente
            factura = facturaEscapada;
        } else {
            throw new Error('Formato de factura no v√°lido');
        }

        console.log('üí∞ Factura deserializada:', factura);

        // ‚úÖ MARCAR COMO FACTURA PENDIENTE PARA EL MODAL
        facturaPendienteActual = {
            ...factura,
            esFacturaPendiente: true  // ‚úÖ AGREGAR ESTA PROPIEDAD
        };

        // Verificar permisos
        if (!permisosUsuario.puedeCompletarFacturas) {
            throw new Error('No tienes permisos para completar facturas');
        }

        // ‚úÖ VERIFICAR STOCK ANTES DE PROCESAR
        console.log('üì¶ Verificando stock de la factura...');
        const verificacionStock = await verificarStockFacturaPendiente(factura.facturaId);
        console.log('üì¶ Resultado verificaci√≥n stock:', verificacionStock);

        if (!verificacionStock.success) {
            throw new Error(verificacionStock.message || 'Error verificando stock');
        }

        if (verificacionStock.tieneProblemas && verificacionStock.productosConProblemas.length > 0) {
            console.log('‚ö†Ô∏è Se encontraron problemas de stock:', verificacionStock.productosConProblemas);

            // ‚úÖ LIMPIAR CARRITO ANTES DE CARGAR FACTURA PENDIENTE
            productosEnVenta = [];
            clienteSeleccionado = null;

            // ‚úÖ ESTABLECER FACTURA PENDIENTE ACTUAL
            facturaPendienteActual = {
                ...factura,
                esFacturaPendiente: true
            };

            // ‚úÖ CARGAR PRODUCTOS DE LA FACTURA EN EL CARRITO
            if (factura.detallesFactura && Array.isArray(factura.detallesFactura)) {
                factura.detallesFactura.forEach(detalle => {
                    productosEnVenta.push({
                        productoId: detalle.productoId,
                        nombreProducto: detalle.nombreProducto,
                        precioUnitario: detalle.precioUnitario,
                        cantidad: detalle.cantidad,
                        stockDisponible: detalle.stockDisponible || 999,
                        metodoPago: 'efectivo',
                        facturaId: factura.facturaId
                    });
                });
            }

            // ‚úÖ CARGAR CLIENTE
            clienteSeleccionado = {
                clienteId: factura.clienteId,
                nombre: factura.nombreCliente || factura.clienteNombre,
                identificacion: factura.identificacionCliente,
                telefono: factura.telefonoCliente,
                email: factura.emailCliente,
                direccion: factura.direccionCliente
            };

            // ‚úÖ ACTUALIZAR INTERFAZ
            $('#clienteBusqueda').val(clienteSeleccionado.nombre);
            $('#nombreClienteSeleccionado').text(clienteSeleccionado.nombre);
            $('#emailClienteSeleccionado').text(clienteSeleccionado.email || 'Sin email');
            $('#clienteSeleccionado').removeClass('d-none');

            actualizarVistaCarrito();
            actualizarTotales();
            actualizarEstadoBotonFinalizar();

            // ‚úÖ GUARDAR PRODUCTOS PENDIENTES GLOBALMENTE
            window.productosPendientesEntrega = verificacionStock.productosConProblemas;
            window.facturaConPendientes = true;

            console.log('‚ö†Ô∏è Mostrando modal de problemas de stock...');
            mostrarModalProblemasStock(verificacionStock.productosConProblemas, factura);
            return;
        }

        // ‚úÖ SI NO HAY PROBLEMAS, PROCESAR NORMALMENTE
        console.log('‚úÖ Stock verificado, procesando factura sin problemas...');

        // ‚úÖ LIMPIAR CARRITO Y CARGAR FACTURA PENDIENTE
        productosEnVenta = [];
        clienteSeleccionado = null;

        // Establecer factura pendiente actual
        facturaPendienteActual = {
            ...factura,
            esFacturaPendiente: true
        };

        // Cargar productos de la factura
        if (factura.detallesFactura && Array.isArray(factura.detallesFactura)) {
            factura.detallesFactura.forEach(detalle => {
                productosEnVenta.push({
                    productoId: detalle.productoId,
                    nombreProducto: detalle.nombreProducto,
                    precioUnitario: detalle.precioUnitario,
                    cantidad: detalle.cantidad,
                    stockDisponible: detalle.stockDisponible || 999,
                    metodoPago: 'efectivo',
                    facturaId: factura.facturaId
                });
            });
        }

        // Cargar cliente
        clienteSeleccionado = {
            clienteId: factura.clienteId,
            nombre: factura.nombreCliente || factura.clienteNombre,
            identificacion: factura.identificacionCliente,
            telefono: factura.telefonoCliente,
            email: factura.emailCliente,
            direccion: factura.direccionCliente
        };

        // Actualizar interfaz
        $('#clienteBusqueda').val(clienteSeleccionado.nombre);
        $('#nombreClienteSeleccionado').text(clienteSeleccionado.nombre);
        $('#emailClienteSeleccionado').text(clienteSeleccionado.email || 'Sin email');
        $('#clienteSeleccionado').removeClass('d-none');

        actualizarVistaCarrito();
        actualizarTotales();
        actualizarEstadoBotonFinalizar();

        // Al final, antes de mostrar el modal de finalizar
        // ‚úÖ CERRAR MODAL DE FACTURAS PENDIENTES ANTES DE ABRIR FINALIZAR
        const modalFacturasPendientes = bootstrap.Modal.getInstance(document.getElementById('facturasPendientesModal'));
        if (modalFacturasPendientes) {
            modalFacturasPendientes.hide();
        }


        // Mostrar modal de finalizar venta directamente
        setTimeout(() => {
            mostrarModalFinalizarVenta();
        }, 500);
       

    } catch (error) {
        console.error('‚ùå Error procesando factura pendiente:', error);

        if (typeof Swal !== 'undefined') {
            Swal.fire({
                icon: 'error',
                title: 'Error al procesar',
                text: error.message || 'Error desconocido al procesar la factura',
                confirmButtonColor: '#dc3545'
            });
        } else {
            alert('Error: ' + (error.message || 'Error al procesar la factura'));
        }
    }
}
