async function procesarFacturaPendiente(facturaEscapada) {
    try {
        // ‚úÖ CERRAR MODAL DE FACTURAS PENDIENTES INMEDIATAMENTE
        const modalFacturasPendientes = bootstrap.Modal.getInstance(document.getElementById('facturasPendientesModal'));
        if (modalFacturasPendientes) {
            modalFacturasPendientes.hide();
            console.log('üö™ Modal de facturas pendientes cerrado al inicio del procesamiento');
        }

        // ‚úÖ PEQUE√ëO DELAY PARA ASEGURAR QUE EL MODAL SE CIERRE COMPLETAMENTE
        await new Promise(resolve => setTimeout(resolve, 300));

        console.log('üí∞ === PROCESANDO FACTURA PENDIENTE ===');
        console.log('üí∞ Factura escapada recibida:', facturaEscapada);

        // ‚úÖ DESERIALIZAR FACTURA (manejo robusto para ambos formatos)
        let factura;
        if (typeof facturaEscapada === 'string') {
            // Si es cadena, verificar si est√° escapada
            if (facturaEscapada.includes('&quot;')) {
                factura = JSON.parse(facturaEscapada.replace(/&quot;/g, '"'));
            } else {
                factura = JSON.parse(facturaEscapada);
            }
        } else if (typeof facturaEscapada === 'object' && facturaEscapada !== null) {
            // Si ya es un objeto, usarlo directamente
            factura = facturaEscapada;
        } else {
            throw new Error('Formato de factura no v√°lido');
        }

        console.log('üí∞ Factura deserializada:', factura);

        // ‚úÖ MARCAR COMO FACTURA PENDIENTE PARA EL MODAL
        facturaPendienteActual = {
            ...factura,
            esFacturaPendiente: true  // ‚úÖ AGREGAR ESTA PROPIEDAD
        };

        // Verificar permisos
        if (!permisosUsuario.puedeCompletarFacturas) {
            throw new Error('No tienes permisos para completar facturas');
        }

        // ‚úÖ VERIFICAR STOCK ANTES DE PROCESAR
        console.log('üì¶ Verificando stock de la factura...');
        const verificacionStock = await verificarStockFacturaPendiente(factura.facturaId);
        console.log('üì¶ Resultado verificaci√≥n stock:', verificacionStock);

        if (!verificacionStock.success) {
            throw new Error(verificacionStock.message || 'Error verificando stock');
        }

        if (verificacionStock.tieneProblemas && verificacionStock.productosConProblemas.length > 0) {
            console.log('‚ö†Ô∏è Se encontraron problemas de stock:', verificacionStock.productosConProblemas);

            // ‚úÖ LIMPIAR CARRITO ANTES DE CARGAR FACTURA PENDIENTE
            productosEnVenta = [];
            clienteSeleccionado = null;

            // ‚úÖ ESTABLECER FACTURA PENDIENTE ACTUAL
            facturaPendienteActual = {
                ...factura,
                esFacturaPendiente: true
            };
