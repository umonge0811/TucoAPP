/**
 * Verificar stock de productos de una factura pendiente
 */
async function verificarStockFacturaPendiente(facturaId) {
    try {
        console.log('üì¶ === VERIFICANDO STOCK PARA FACTURA ===');
        console.log('üì¶ Factura ID:', facturaId);
        
        const response = await fetch('/Facturacion/VerificarStockFactura', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({ facturaId: facturaId }),
            credentials: 'include'
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Error del servidor:', response.status, errorText);
            throw new Error(`Error ${response.status}: ${response.statusText}`);
        }

        const resultado = await response.json();
        console.log('üì¶ === RESPUESTA DEL SERVIDOR ===');
        console.log('üì¶ Resultado completo:', JSON.stringify(resultado, null, 2));
        console.log('üì¶ Tipo:', typeof resultado);
        console.log('üì¶ Propiedades:', Object.keys(resultado || {}));
        
        // ‚úÖ PROCESAMIENTO SIMPLIFICADO Y ROBUSTO
        let tieneProblemas = false;
        let productosConProblemas = [];
        let success = true;
        let message = 'Verificaci√≥n completada';

        if (resultado) {
            // 1. Verificar si la operaci√≥n fue exitosa
            if (resultado.success === false || resultado.error) {
                success = false;
                message = resultado.message || resultado.error || 'Error en la verificaci√≥n';
            }

            // 2. Detectar problemas de stock
            tieneProblemas = resultado.hayProblemasStock === true || 
                           resultado.tieneProblemas === true ||
                           (resultado.productosConProblemas && Array.isArray(resultado.productosConProblemas) && resultado.productosConProblemas.length > 0);

            // 3. Extraer productos con problemas
            if (resultado.productosConProblemas) {
                if (Array.isArray(resultado.productosConProblemas)) {
                    productosConProblemas = resultado.productosConProblemas;
                } else if (typeof resultado.productosConProblemas === 'object') {
                    // Si es un objeto, buscar arrays dentro
                    for (const [key, value] of Object.entries(resultado.productosConProblemas)) {
                        if (Array.isArray(value)) {
                            productosConProblemas = value;
                            console.log(`üì¶ Productos encontrados en '${key}':`, value.length);
                            break;
                        }
                    }
                }
            }

            // 4. Normalizar productos con problemas
            productosConProblemas = productosConProblemas.map(producto => ({
                productoId: producto.productoId || producto.ProductoId || 0,
                nombreProducto: producto.nombreProducto || producto.NombreProducto || 'Producto sin nombre',
                descripcion: producto.descripcion || producto.Descripcion || '',
                precio: producto.precio || producto.Precio || 0,
                cantidadRequerida: producto.cantidadRequerida || producto.CantidadRequerida || 0,
                stockDisponible: producto.stockDisponible || producto.StockDisponible || 0,
                problema: producto.problema || 'Stock insuficiente'
            }));

            // 5. Actualizar mensaje
            if (tieneProblemas) {
                message = `Se encontraron ${productosConProblemas.length} productos con problemas de stock`;
            }
        }
        
        console.log('üì¶ === RESULTADO FINAL ===');
        console.log('üì¶ Success:', success);
        console.log('üì¶ Tiene problemas:', tieneProblemas);
        console.log('üì¶ Productos con problemas:', productosConProblemas.length);
        console.log('üì¶ Productos normalizados:', productosConProblemas);
        
        return {
            success: success,
            tieneProblemas: tieneProblemas,
            productosConProblemas: productosConProblemas,
            message: message
        };
        
    } catch (error) {
        console.error('‚ùå Error verificando stock:', error);
        return { 
            success: false, 
            tieneProblemas: false, 
            productosConProblemas: [],
            message: error.message || 'Error de conexi√≥n'
        };
    }
}

/**
 * Mostrar modal con problemas de stock
 */
function mostrarModalProblemasStock(productosConProblemas, factura) {
    console.log('‚ö†Ô∏è === MOSTRANDO MODAL PROBLEMAS DE STOCK ===');
    console.log('‚ö†Ô∏è Productos recibidos:', productosConProblemas);
    console.log('‚ö†Ô∏è Factura:', factura);
    
    // Validar entrada
    if (!Array.isArray(productosConProblemas) || productosConProblemas.length === 0) {
        console.error('‚ùå Array de productos inv√°lido o vac√≠o');
        Swal.fire({
            icon: 'warning',
            title: 'Sin problemas de stock',
            text: 'No se encontraron productos con problemas de stock para mostrar',
            confirmButtonColor: '#ffc107'
        });
        return;
    }
    
    try {
        console.log('‚ö†Ô∏è Inicializando modal de problemas de stock...');
        
        // Verificar que el modal existe en el DOM
        const modalElement = document.getElementById('problemasStockModal');
        if (!modalElement) {
            console.error('‚ùå Modal problemasStockModal no encontrado en el DOM');
            Swal.fire({
                icon: 'error',
                title: 'Error del sistema',
                text: 'El modal de problemas de stock no est√° disponible',
                confirmButtonColor: '#dc3545'
            });
            return;
        }
        
        // ‚úÖ VARIABLE PARA CONTROLAR SI EL MODAL SE CERR√ì POR UNA ACCI√ìN V√ÅLIDA
        let modalCerradoPorAccion = false;
        
        // ‚úÖ LIMPIAR EVENTOS ANTERIORES Y CONFIGURAR NUEVO COMPORTAMIENTO
        $(modalElement).off('hidden.bs.modal.problemasStock').on('hidden.bs.modal.problemasStock', function() {
            console.log('üîç === MODAL PROBLEMAS STOCK CERRADO ===');
            console.log('üîç Modal cerrado por acci√≥n v√°lida:', modalCerradoPorAccion);
            
            // Solo limpiar carrito si NO fue cerrado por una acci√≥n v√°lida
            if (!modalCerradoPorAccion) {
                console.log('‚ùå === MODAL CERRADO SIN ACCI√ìN V√ÅLIDA ===');
                console.log('‚ùå Limpiando carrito por cancelaci√≥n del usuario');
                
                // Limpiar carrito completamente
                productosEnVenta = [];
                clienteSeleccionado = null;
                facturaPendienteActual = null;
                
                // Limpiar interfaz
                $('#clienteBusqueda').val('');
                $('#clienteSeleccionado').addClass('d-none');
                actualizarVistaCarrito();
                actualizarTotales();
                actualizarEstadoBotonFinalizar();
                
                // Mostrar notificaci√≥n
                mostrarToast('Operaci√≥n cancelada', 'El carrito ha sido limpiado', 'info');
                
                console.log('‚úÖ Carrito limpiado por cancelaci√≥n');
            } else {
                console.log('‚úÖ Modal cerrado por acci√≥n v√°lida - carrito mantenido');
            }
            
            // Resetear la variable para futuros usos
            modalCerradoPorAccion = false;
        });
        
        // ‚úÖ FUNCI√ìN HELPER PARA MARCAR CIERRE V√ÅLIDO
        window.marcarCierreValidoProblemasStock = function() {
            modalCerradoPorAccion = true;
        };
        
        // ‚úÖ CONFIGURAR EVENTOS DE LOS BOTONES DEL MODAL
        configurarEventosModalProblemasStock();
        
        // Mostrar modal
        const modal = new bootstrap.Modal(modalElement);
        modal.show();
        
        // Estado inicial: mostrar loading
        $('#problemasStockLoading').show();
        $('#problemasStockContent').hide();
        
        // Procesar y mostrar productos despu√©s de un breve delay
        setTimeout(() => {
            mostrarProductosConProblemas(productosConProblemas, factura);
        }, 300);
        
    } catch (error) {
        console.error('‚ùå Error mostrando modal de problemas:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se pudo mostrar el modal de problemas de stock',
            confirmButtonColor: '#dc3545'
        });
    }
}

function mostrarProductosConProblemas(productos, factura) {
    console.log('‚ö†Ô∏è === MOSTRANDO PRODUCTOS CON PROBLEMAS ===');
    console.log('‚ö†Ô∏è Cantidad de productos:', productos?.length || 0);
    console.log('‚ö†Ô∏è Productos detallados:', productos);
    console.log('‚ö†Ô∏è Factura:', factura);
    
    try {
        // Validar productos
        if (!Array.isArray(productos) || productos.length === 0) {
            console.error('‚ùå No hay productos v√°lidos para mostrar');
            $('#problemasStockLoading').hide();
            $('#problemasStockContent').html(`
                <div class="alert alert-warning">
                    <i class="bi bi-info-circle me-2"></i>
                    No se encontraron productos con problemas de stock espec√≠ficos.
                </div>
            `).show();
            return;
        }
        
        // Extraer informaci√≥n de la factura
        const numeroFactura = factura?.numeroFactura || facturaPendienteActual?.numeroFactura || 'N/A';
        const nombreCliente = factura?.nombreCliente || clienteSeleccionado?.nombre || 'Cliente General';
        
        console.log('‚ö†Ô∏è Informaci√≥n de la factura extra√≠da:', {
            numeroFactura,
            nombreCliente
        });
        
        // Generar HTML de la tabla
        let html = '';
        let productosValidos = 0;
        
        productos.forEach((producto, index) => {
            try {
                // Validar estructura del producto
                const productoId = producto.productoId || producto.ProductoId || index;
                const nombreProducto = producto.nombreProducto || producto.NombreProducto || `Producto ${index + 1}`;
                const cantidadRequerida = parseInt(producto.cantidadRequerida || producto.CantidadRequerida || 0);
                const stockDisponible = parseInt(producto.stockDisponible || producto.StockDisponible || 0);
                const faltante = Math.max(0, cantidadRequerida - stockDisponible);
                
                console.log(`‚ö†Ô∏è Procesando producto ${index + 1}:`, {
                    productoId,
                    nombreProducto,
                    cantidadRequerida,
                    stockDisponible,
                    faltante
                });
                
                // Solo mostrar si realmente hay problema
                if (cantidadRequerida > stockDisponible) {
                    html += `
                        <tr class="problema-stock-row" data-producto-id="${productoId}">
                            <td>
                                <strong>${nombreProducto}</strong>
                                <br><small class="text-muted">ID: ${productoId}</small>
                                ${producto.descripcion ? `<br><small class="text-muted">${producto.descripcion}</small>` : ''}
                            </td>
                            <td class="text-center">
                                <span class="badge bg-info">${cantidadRequerida}</span>
                            </td>
                            <td class="text-center">
                                <span class="badge ${stockDisponible > 0 ? 'bg-warning' : 'bg-danger'}">${stockDisponible}</span>
                            </td>
                            <td class="text-center">
                                <span class="badge bg-danger">${faltante}</span>
                            </td>
                            <td class="text-center">
                                <button type="button" 
                                        class="btn btn-sm btn-outline-danger btn-eliminar-problema" 
                                        data-producto-id="${productoId}"
                                        title="Eliminar este producto de la factura">
                                    <i class="bi bi-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `;
                    productosValidos++;
                }
            } catch (error) {
                console.error(`‚ùå Error procesando producto ${index}:`, error, producto);
            }
        });
        
        console.log('‚ö†Ô∏è Productos v√°lidos con problemas:', productosValidos);
        
        if (productosValidos === 0) {
            $('#problemasStockLoading').hide();
            $('#problemasStockContent').html(`
                <div class="alert alert-success">
                    <i class="bi bi-check-circle me-2"></i>
                    Todos los productos tienen stock suficiente.
                </div>
            `).show();
            return;
        }
        
        // Actualizar informaci√≥n de la factura
        $('#problemasStockFactura').text(numeroFactura);
        $('#problemasStockCliente').text(nombreCliente);
        
        // Actualizar tabla
        $('#problemasStockTableBody').html(html);
        
        // ‚úÖ CONFIGURAR EVENTOS PARA BOTONES DE ELIMINAR PRODUCTO
        $(document).off('click.eliminarProblema', '.btn-eliminar-problema').on('click.eliminarProblema', '.btn-eliminar-problema', function(e) {
            e.preventDefault();
            e.stopPropagation();
            const productoId = $(this).data('producto-id');
            console.log('üóëÔ∏è Eliminar producto problema ID:', productoId);
            eliminarProductoProblema(productoId);
        });
        
        // Mostrar contenido y ocultar loading
        $('#problemasStockLoading').hide();
        $('#problemasStockContent').show();
        
        console.log('‚úÖ Modal de problemas de stock mostrado correctamente');
        
    } catch (error) {
        console.error('‚ùå Error en mostrarProductosConProblemas:', error);
        $('#problemasStockLoading').hide();
        $('#problemasStockContent').html(`
            <div class="alert alert-danger">
                <i class="bi bi-exclamation-triangle me-2"></i>
                Error al procesar los problemas de stock: ${error.message}
            </div>
        `).show();
    }
}

/**
 * Eliminar producto con problema de stock
 */
function eliminarProductoProblema(productoId) {
    console.log('üóëÔ∏è === ELIMINANDO PRODUCTO CON PROBLEMA ===');
    console.log('üóëÔ∏è Producto ID:', productoId);
    console.log('üóëÔ∏è Factura pendiente actual:', facturaPendienteActual);
    
    // ‚úÖ VERIFICAR SI ES UNA FACTURA PENDIENTE
    if (facturaPendienteActual && facturaPendienteActual.facturaId) {
        // Si es factura pendiente, usar endpoint del servidor
        eliminarProductoConProblema(facturaPendienteActual.facturaId, productoId);
    } else {
        // Si es carrito local, eliminar directamente
        const indiceEnCarrito = productosEnVenta.findIndex(p => p.productoId === productoId);
        if (indiceEnCarrito !== -1) {
            const nombreProducto = productosEnVenta[indiceEnCarrito].nombreProducto;
            productosEnVenta.splice(indiceEnCarrito, 1);
            actualizarVistaCarrito();
            actualizarTotales();
            
            // Ocultar fila en la tabla
            $(`.problema-stock-row[data-producto-id="${productoId}"]`).fadeOut(300, function() {
                $(this).remove();
            });
            
            mostrarToast('Producto eliminado', `${nombreProducto} removido de la factura`, 'info');
        }
    }
}

/**
 * Registrar productos pendientes de entrega y capturar c√≥digos de seguimiento
 */
async function registrarProductosPendientesEntrega(facturaId, productosConProblemas) {
    try {
        console.log('üì¶ === REGISTRANDO PRODUCTOS PENDIENTES DE ENTREGA ===');
        console.log('üì¶ Factura ID:', facturaId);
        console.log('üì¶ Productos con problemas recibidos:', productosConProblemas);
        
        if (!productosConProblemas || productosConProblemas.length === 0) {
            console.log('üì¶ No hay productos pendientes para registrar');
            return { success: true, message: 'No hay productos pendientes' };
        }

        // Obtener informaci√≥n del usuario actual
        const usuarioActual = obtenerUsuarioActual();
        const usuarioId = usuarioActual?.usuarioId || usuarioActual?.id || 1;

        // Estructura correcta que espera el controlador
        const datosRegistro = {
            facturaId: facturaId,
            usuarioCreacion: usuarioId,
            productosPendientes: productosConProblemas.map(producto => {
                // Normalizar datos del producto
                const cantidadRequerida = producto.cantidadRequerida || producto.cantidadRequirida || producto.cantidad || 0;
                const stockDisponible = producto.stockDisponible || producto.stock || 0;
                const cantidadPendiente = Math.max(0, cantidadRequerida - stockDisponible);
                
                console.log(`üì¶ Procesando producto ${producto.productoId}:`, {
                    cantidadRequerida,
                    stockDisponible,
                    cantidadPendiente
                });
                
                return {
                    productoId: producto.productoId,
                    nombreProducto: producto.nombreProducto || 'Sin nombre',
                    cantidadSolicitada: cantidadRequerida,
                    cantidadPendiente: cantidadPendiente,
                    stockDisponible: stockDisponible,
                    precioUnitario: producto.precioUnitario || 0,
                    observaciones: `Stock insuficiente al momento de la facturaci√≥n. Disponible: ${stockDisponible}, Requerido: ${cantidadRequerida}`
                };
            })
        };

        console.log('üì¶ Datos a enviar al servidor:', JSON.stringify(datosRegistro, null, 2));

        const response = await fetch('/Facturacion/RegistrarPendientesEntrega', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(datosRegistro),
            credentials: 'include'
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Error del servidor:', errorText);
            throw new Error(`Error ${response.status}: ${response.statusText}`);
        }

        const resultado = await response.json();
        console.log('üì¶ === RESPUESTA COMPLETA DEL SERVIDOR ===');
        console.log('üì¶ Resultado completo:', resultado);
        console.log('üì¶ Tipo de resultado:', typeof resultado);
        console.log('üì¶ Propiedades:', Object.keys(resultado || {}));

        if (resultado.success) {
            console.log('‚úÖ Productos pendientes registrados exitosamente');
            
            // ‚úÖ CAPTURAR C√ìDIGOS DE SEGUIMIENTO CON M√öLTIPLES ESTRATEGIAS
            let codigosCapturados = [];
            
            // Estrategia 1: Desde pendientesCreados directo
            if (resultado.pendientesCreados && Array.isArray(resultado.pendientesCreados)) {
                console.log('üé´ Capturando desde resultado.pendientesCreados...');
                codigosCapturados = resultado.pendientesCreados.map(pendiente => ({
                    productoId: pendiente.productoId,
                    nombreProducto: pendiente.nombreProducto,
                    cantidadPendiente: pendiente.cantidadPendiente,
                    codigoSeguimiento: pendiente.codigoSeguimiento
                }));
            }
            // Estrategia 2: Desde data.pendientesCreados
            else if (resultado.data && resultado.data.pendientesCreados && Array.isArray(resultado.data.pendientesCreados)) {
                console.log('üé´ Capturando desde resultado.data.pendientesCreados...');
                codigosCapturados = resultado.data.pendientesCreados.map(pendiente => ({
                    productoId: pendiente.productoId,
                    nombreProducto: pendiente.nombreProducto,
                    cantidadPendiente: pendiente.cantidadPendiente,
                    codigoSeguimiento: pendiente.codigoSeguimiento
                }));
            }
            // Estrategia 3: Buscar en cualquier propiedad que sea array
            else {
                console.log('üîç Buscando c√≥digos en otras propiedades...');
                for (const [key, value] of Object.entries(resultado)) {
                    if (Array.isArray(value) && value.length > 0) {
                        const firstItem = value[0];
                        if (firstItem && firstItem.codigoSeguimiento) {
                            console.log(`üé´ C√≥digos encontrados en resultado.${key}`);
                            codigosCapturados = value.map(pendiente => ({
                                productoId: pendiente.productoId,
                                nombreProducto: pendiente.nombreProducto,
                                cantidadPendiente: pendiente.cantidadPendiente,
                                codigoSeguimiento: pendiente.codigoSeguimiento
                            }));
                            break;
                        }
                    }
                }
            }
            
            // ‚úÖ GUARDAR C√ìDIGOS GLOBALMENTE
            if (codigosCapturados.length > 0) {
                window.codigosSeguimientoPendientes = codigosCapturados;
                console.log('üé´ === C√ìDIGOS DE SEGUIMIENTO CAPTURADOS ===');
                console.log('üé´ Cantidad:', codigosCapturados.length);
                console.log('üé´ C√≥digos:', window.codigosSeguimientoPendientes);
                codigosCapturados.forEach((codigo, index) => {
                    console.log(`üé´ ${index + 1}. ${codigo.nombreProducto}: ${codigo.codigoSeguimiento}`);
                });
            } else {
                console.warn('‚ö†Ô∏è No se pudieron capturar c√≥digos de seguimiento de la respuesta');
                // Fallback: generar c√≥digos b√°sicos
                window.codigosSeguimientoPendientes = productosConProblemas.map((producto, index) => ({
                    productoId: producto.productoId,
                    nombreProducto: producto.nombreProducto,
                    cantidadPendiente: producto.cantidadPendiente || Math.max(0, (producto.cantidadRequerida || 0) - (producto.stockDisponible || 0)),
                    codigoSeguimiento: `FAC-${facturaId}-${producto.productoId}`
                }));
                console.log('üé´ C√≥digos fallback generados:', window.codigosSeguimientoPendientes);
            }
            
            const cantidadRegistrados = resultado.pendientesCreados?.length || codigosCapturados.length || productosConProblemas.length;
            mostrarToast('Productos Pendientes', 
                `Se registraron ${cantidadRegistrados} productos para entrega posterior`, 
                'info');
            return resultado;
        } else {
            throw new Error(resultado.message || 'Error al registrar productos pendientes');
        }

    } catch (error) {
        console.error('‚ùå Error registrando productos pendientes:', error);
        mostrarToast('Error', 'No se pudieron registrar los productos pendientes: ' + error.message, 'warning');
        return { success: false, message: error.message };
    }
}

/**
 * Eliminar producto con problema de stock desde el endpoint del servidor
 */
async function eliminarProductoConProblema(facturaId, productoId) {
    try {
        console.log('üóëÔ∏è === ELIMINANDO PRODUCTO CON PROBLEMA DE STOCK ===');
        console.log('üóëÔ∏è Factura ID:', facturaId);
        console.log('üóëÔ∏è Producto ID:', productoId);
        
        const confirmacion = await Swal.fire({
            title: '¬øEliminar producto?',
            text: '¬øEst√° seguro de que desea eliminar este producto de la factura?',
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#dc3545',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'S√≠, eliminar',
            cancelButtonText: 'Cancelar'
        });

        if (!confirmacion.isConfirmed) {
            return;
        }

        const response = await fetch('/Facturacion/EliminarProductosFactura', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify({
                facturaId: facturaId,
                productosAEliminar: [productoId]
            }),
            credentials: 'include'
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå Error del servidor:', errorText);
            throw new Error(`Error ${response.status}: ${response.statusText}`);
        }

        const resultado = await response.json();
        console.log('üìã Respuesta del servidor:', resultado);

        if (resultado.success) {
            // Eliminar producto del carrito local
            const indiceEnCarrito = productosEnVenta.findIndex(p => p.productoId === productoId);
            if (indiceEnCarrito !== -1) {
                const nombreProducto = productosEnVenta[indiceEnCarrito].nombreProducto;
                productosEnVenta.splice(indiceEnCarrito, 1);
                
                // Actualizar vista del carrito
                actualizarVistaCarrito();
                actualizarTotales();
                actualizarEstadoBotonFinalizar();
                
                // Mostrar confirmaci√≥n de eliminaci√≥n con SweetAlert
                Swal.fire({
                    icon: 'success',
                    title: '¬°Producto Eliminado!',
                    text: `${nombreProducto} ha sido eliminado exitosamente de la factura`,
                    confirmButtonText: 'Entendido',
                    confirmButtonColor: '#28a745',
                    timer: 3000,
                    timerProgressBar: true,
                    showConfirmButton: true
                });
                
                // Ocultar fila en la tabla de problemas
                $(`.problema-stock-row[data-producto-id="${productoId}"]`).fadeOut(300, function() {
                    $(this).remove();
                    
                    // Verificar si quedan productos con problemas
                    const problemasRestantes = $('.problema-stock-row').length;
                    console.log('üîç Problemas restantes:', problemasRestantes);
                    
                    if (problemasRestantes === 0) {
                        console.log('‚úÖ No quedan productos con problemas - cerrando modal y abriendo finalizaci√≥n');
                        
                        // ‚úÖ PRESERVAR INFORMACI√ìN DE LA FACTURA ANTES DE CONTINUAR
                        if (facturaPendienteActual && facturaPendienteActual.numeroFactura) {
                            console.log('üìã Preservando n√∫mero de factura:', facturaPendienteActual.numeroFactura);
                            
                            // Asegurar que la factura pendiente mantenga su informaci√≥n
                            window.facturaParaRecibo = {
                                numeroFactura: facturaPendienteActual.numeroFactura,
                                nombreCliente: facturaPendienteActual.nombreCliente || clienteSeleccionado?.nombre,
                                usuarioCreadorNombre: facturaPendienteActual.usuarioCreadorNombre
                            };
                        }
                        
                        // Marcar cierre v√°lido para evitar limpiar carrito
                        if (window.marcarCierreValidoProblemasStock) {
                            window.marcarCierreValidoProblemasStock();
                        }
                        
                        // Cerrar modal de problemas
                        $('#problemasStockModal').modal('hide');
                        
                        // Abrir modal de finalizaci√≥n despu√©s de un breve delay
                        setTimeout(() => {
                            if (productosEnVenta.length > 0) {
                                mostrarModalFinalizarVenta();
                            } else {
                                mostrarToast('Carrito vac√≠o', 'No quedan productos para finalizar la venta', 'warning');
                            }
                        }, 500);
                    }
                });
                
                console.log('‚úÖ Producto eliminado exitosamente');
            }
            
            // Actualizar carrito despu√©s de eliminar
            actualizarCarritoDespuesDeEliminar([productoId]);
            
        } else {
            throw new Error(resultado.message || 'Error al eliminar el producto');
        }

    } catch (error) {
        console.error('‚ùå Error eliminando producto:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'No se pudo eliminar el producto: ' + error.message,
            confirmButtonColor: '#dc3545'
        });
    }
}

/**
 * Actualizar carrito despu√©s de eliminar productos de una factura
 */
function actualizarCarritoDespuesDeEliminar(productosEliminados) {
    console.log('üîÑ === ACTUALIZANDO CARRITO DESPU√âS DE ELIMINAR ===');
    console.log('üîÑ Productos a eliminar del carrito:', productosEliminados);
    console.log('üîÑ Estado inicial del carrito:', productosEnVenta.length, 'productos');

    try {
        // ‚úÖ ELIMINAR PRODUCTOS DEL CARRITO LOCAL
        productosEliminados.forEach(productoId => {
            const indiceEnCarrito = productosEnVenta.findIndex(p => p.productoId == productoId);
            if (indiceEnCarrito !== -1) {
                const nombreProducto = productosEnVenta[indiceEnCarrito].nombreProducto;
                productosEnVenta.splice(indiceEnCarrito, 1);
                console.log('üóëÔ∏è Producto eliminado del carrito:', nombreProducto);
            }
        });

        console.log('üîÑ Estado final del carrito:', productosEnVenta.length, 'productos');

        // ‚úÖ ACTUALIZAR VISTA DEL CARRITO
        actualizarVistaCarrito();
        actualizarTotales();
        actualizarEstadoBotonFinalizar();

        // ‚úÖ LIMPIAR ESTADO DE FACTURA PENDIENTE SI NO QUEDAN PRODUCTOS
        if (productosEnVenta.length === 0) {
            facturaPendienteActual = null;
            clienteSeleccionado = null;
            $('#clienteBusqueda').val('');
            $('#clienteSeleccionado').addClass('d-none');
            console.log('üßπ Carrito limpiado completamente - no quedan productos');
        }

        console.log('‚úÖ Carrito actualizado exitosamente despu√©s de eliminar productos');

    } catch (error) {
        console.error('‚ùå Error actualizando carrito despu√©s de eliminar:', error);
    }
}

/**
 * Configurar eventos de los botones del modal de problemas de stock
 */
function configurarEventosModalProblemasStock() {
    console.log('‚öôÔ∏è === CONFIGURANDO EVENTOS MODAL PROBLEMAS STOCK ===');
    
    // ‚úÖ LIMPIAR EVENTOS ANTERIORES PARA EVITAR DUPLICADOS
    $(document).off('click.problemasStock', '#btnFacturarTodosModos');
    $(document).off('click.problemasStock', '#btnCancelarProblemasStock');
    
    // ‚úÖ CONFIGURAR EVENTO FACTURAR DE TODOS MODOS (delegaci√≥n de eventos)
    $(document).on('click.problemasStock', '#btnFacturarTodosModos', function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('‚úÖ BOT√ìN FACTURAR DE TODOS MODOS CLICKEADO');
        facturarTodosModos();
    });
    
    // ‚úÖ CONFIGURAR EVENTO CANCELAR (delegaci√≥n de eventos)
    $(document).on('click.problemasStock', '#btnCancelarProblemasStock', function(e) {
        e.preventDefault();
        e.stopPropagation();
        console.log('‚ùå BOT√ìN CANCELAR CLICKEADO');
        cancelarProblemasStock();
    });
    
    console.log('‚úÖ Eventos del modal de problemas de stock configurados con delegaci√≥n');
}

/**
 * Facturar de todos modos - Crear registros pendientes para productos sin stock
 */
async function facturarTodosModos() {
    console.log('‚ö†Ô∏è === FACTURAR DE TODOS MODOS ===');
    console.log('‚ö†Ô∏è Usuario decidi√≥ facturar con productos pendientes de entrega');
    
    try {
        // ‚úÖ CONFIRMAR LA ACCI√ìN CON EL USUARIO
        const confirmacion = await Swal.fire({
            title: '¬øFacturar de todos modos?',
            html: `
                <div class="text-start">
                    <p><strong>Esta acci√≥n:</strong></p>
                    <ul>
                        <li>Crear√° la factura con todos los productos</li>
                        <li>Los productos sin stock quedar√°n pendientes de entrega</li>
                        <li>Se registrar√°n autom√°ticamente para entrega posterior</li>
                        <li>El cliente recibir√° notificaci√≥n cuando llegue el stock</li>
                    </ul>
                    <p class="text-warning"><strong>¬øDesea continuar?</strong></p>
                </div>
            `,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#ffc107',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'S√≠, Facturar de todos modos',
            cancelButtonText: 'Cancelar'
        });

        if (!confirmacion.isConfirmed) {
            return;
        }

        // ‚úÖ OBTENER PRODUCTOS CON PROBLEMAS DESDE EL DOM CORRECTAMENTE
        const productosConProblemas = [];
        $('.problema-stock-row').each(function() {
            const $fila = $(this);
            const productoId = $fila.data('producto-id');
            const nombreProducto = $fila.find('td:first strong').text().trim();
            
            // ‚úÖ CAPTURAR CANTIDADES CORRECTAMENTE DESDE LAS COLUMNAS DE LA TABLA
            const cantidadSolicitada = parseInt($fila.find('td:eq(1) .badge.bg-info').text().trim()) || 0;
            const stockDisponible = parseInt($fila.find('td:eq(2) .badge.bg-warning, td:eq(2) .badge.bg-danger').text().trim()) || 0;
            const cantidadPendiente = parseInt($fila.find('td:eq(3) .badge.bg-danger').text().trim()) || 0;
            
            console.log(`üì¶ Procesando producto ${productoId}:`, {
                nombreProducto,
                cantidadSolicitada,
                stockDisponible,
                cantidadPendiente
            });
            
            if (productoId && cantidadSolicitada > 0) {
                // Buscar el producto en el carrito para obtener precio
                const productoEnCarrito = productosEnVenta.find(p => p.productoId == productoId);
                
                productosConProblemas.push({
                    productoId: parseInt(productoId),
                    nombreProducto: nombreProducto,
                    cantidadSolicitada: cantidadSolicitada,
                    cantidadRequerida: cantidadSolicitada, // Alias
                    cantidadRequirida: cantidadSolicitada, // Alias adicional
                    cantidad: cantidadSolicitada, // Otro alias
                    cantidadPendiente: cantidadPendiente > 0 ? cantidadPendiente : Math.max(0, cantidadSolicitada - stockDisponible),
                    stockDisponible: stockDisponible,
                    stock: stockDisponible, // Alias adicional
                    precioUnitario: productoEnCarrito?.precioUnitario || 0
                });
            }
        });
        
        console.log('üîç Productos con problemas capturados correctamente:', productosConProblemas);
        
        // ‚úÖ VALIDAR QUE SE CAPTURARON DATOS
        if (productosConProblemas.length === 0) {
            console.warn('‚ö†Ô∏è No se capturaron productos con problemas');
            mostrarToast('Advertencia', 'No se detectaron productos con problemas para procesar', 'warning');
            return;
        }
        
        // ‚úÖ MARCAR QUE EL MODAL SE CIERRA POR ACCI√ìN V√ÅLIDA
        if (window.marcarCierreValidoProblemasStock) {
            window.marcarCierreValidoProblemasStock();
        }
        
        // ‚úÖ GUARDAR INFORMACI√ìN DE PRODUCTOS PENDIENTES PARA EL PROCESO DE FACTURACI√ìN
        window.productosPendientesEntrega = productosConProblemas;
        window.codigosSeguimientoPendientes = []; // Inicializar array para c√≥digos
        
        console.log('üíæ Productos pendientes guardados globalmente:', window.productosPendientesEntrega);
        
        // ‚úÖ CERRAR MODAL DE PROBLEMAS
        $('#problemasStockModal').modal('hide');
        
        // ‚úÖ CONTINUAR CON MODAL DE FINALIZACI√ìN DESPU√âS DE UN BREVE DELAY
        setTimeout(() => {
            // Agregar flag para indicar que hay pendientes
            window.facturaConPendientes = true;
            mostrarModalFinalizarVenta();
        }, 500);
        
    } catch (error) {
        console.error('‚ùå Error en facturarTodosModos:', error);
        mostrarToast('Error', 'No se pudo procesar la facturaci√≥n con pendientes', 'danger');
    }
}


function cancelarProblemasStock() {
    console.log('‚ùå === CANCELANDO MODAL PROBLEMAS DE STOCK ===');
    console.log('‚ùå Usuario cancel√≥ modal de problemas de stock');
    
    // Cerrar modal
    $('#problemasStockModal').modal('hide');
    
    // El evento hidden.bs.modal se encargar√° de limpiar el carrito
}
