async function procesarVentaFinal(numeroReferencia = null) {
    const $btnFinalizar = $('#btnConfirmarVenta');

    try {
        // Deshabilitar el bot√≥n y mostrar el estado de carga
        $btnFinalizar.prop('disabled', true).html('<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Procesando...');

        console.log('üîç === DETERMINANDO TIPO DE OPERACI√ìN ===');
        console.log('üîç N√∫mero de referencia recibido:', numeroReferencia);
        
        // ‚úÖ DETECTAR SI ES CONVERSI√ìN DE PROFORMA
        const esConversionProforma = numeroReferencia && numeroReferencia.startsWith('PROF') || 
                                   window.proformaOriginalParaConversion;
        
        // ‚úÖ VERIFICAR SI ES UNA FACTURA PENDIENTE (tiene facturaId en alg√∫n producto)
        const esFacturaPendiente = productosEnVenta.some(p => p.facturaId);
        const facturaId = esFacturaPendiente ? productosEnVenta[0].facturaId : null;

        console.log('üîç Es conversi√≥n de proforma:', esConversionProforma);
        console.log('üîç Es factura pendiente:', esFacturaPendiente);
        console.log('üîç Factura ID:', facturaId);

        if (esConversionProforma) {
            // ‚úÖ CONVERSI√ìN DE PROFORMA A FACTURA
            console.log('üîÑ Procesando conversi√≥n de proforma');
            
            // Capturar n√∫mero de proforma
            let numeroProforma = numeroReferencia;
            if (!numeroProforma && window.proformaOriginalParaConversion) {
                numeroProforma = window.proformaOriginalParaConversion.numeroProforma;
            }
            
            console.log('üîÑ N√∫mero de proforma capturado:', numeroProforma);
            
            // Validaciones espec√≠ficas para conversi√≥n de proforma
            if (!productosEnVenta || productosEnVenta.length === 0) {
                throw new Error('No hay productos para convertir la proforma');
            }
            
            if (!clienteSeleccionado) {
                throw new Error('No se ha seleccionado un cliente para la conversi√≥n');
            }
            
            // Procesar como nueva factura con datos de proforma
            await crearNuevaFactura('Factura');
            await completarFacturaExistente(numeroProforma);

            
        } else if (esFacturaPendiente && facturaId) {
            // ‚úÖ COMPLETAR FACTURA EXISTENTE
            console.log('‚úÖ Completando factura pendiente ID:', facturaId);
            await completarFacturaExistente(facturaId);
        } else {
            // ‚úÖ CREAR NUEVA FACTURA NORMAL
            console.log('üÜï Creando nueva factura');
            await crearNuevaFactura();
        }

    } catch (error) {
        console.error('‚ùå Error procesando venta:', error);
        
        // ‚úÖ MOSTRAR ERROR CON SWEETALERT
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                icon: 'error',
                title: 'Error procesando la venta',
                text: 'Hubo un problema inesperado al procesar la venta',
                confirmButtonText: 'Entendido',
                confirmButtonColor: '#dc3545'
            });
        } else {
            alert('Error: Hubo un problema procesando la venta');
        }
    } finally {
        // Restaurar bot√≥n
        $btnFinalizar.prop('disabled', false).html('<i class="bi bi-check-circle me-2"></i>Finalizar Venta');
    }
}
