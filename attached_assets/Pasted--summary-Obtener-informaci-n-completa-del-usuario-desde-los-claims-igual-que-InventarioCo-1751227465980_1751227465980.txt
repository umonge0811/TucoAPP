/// <summary>
/// Obtener informaci√≥n completa del usuario desde los claims (igual que InventarioController)
/// </summary>
private (int usuarioId, string nombre, string email) ObtenerInfoUsuario()
{
    try
    {
        _logger.LogInformation("üîç Obteniendo informaci√≥n del usuario...");

        // Debug: Mostrar todos los claims
        _logger.LogInformation("üìã Claims disponibles:");
        foreach (var claim in User.Claims)
        {
            _logger.LogInformation("   - {Type}: {Value}", claim.Type, claim.Value);
        }

        // Intentar diferentes claims para obtener el ID del usuario
        var userIdClaim = User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        _logger.LogInformation("NameIdentifier claim: {Value}", userIdClaim ?? "NULL");

        var nameClaim = User.FindFirst(System.Security.Claims.ClaimTypes.Name)?.Value;
        _logger.LogInformation("Name claim: {Value}", nameClaim ?? "NULL");

        var emailClaim = User.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value;
        _logger.LogInformation("Email claim: {Value}", emailClaim ?? "NULL");

        // Intentar parsear el ID
        int userId = 1; // Fallback
        if (int.TryParse(userIdClaim, out int parsedUserId))
        {
            userId = parsedUserId;
            _logger.LogInformation("‚úÖ ID parseado de NameIdentifier: {UserId}", userId);
        }
        else if (int.TryParse(nameClaim, out int userIdFromName))
        {
            userId = userIdFromName;
            _logger.LogInformation("‚úÖ ID parseado de Name: {UserId}", userId);
        }
        else
        {
            _logger.LogWarning("‚ö†Ô∏è No se pudo obtener el ID del usuario, usando fallback 1");
        }

        return (userId, nameClaim ?? "Usuario", emailClaim ?? "");
    }
    catch (Exception ex)
    {
        _logger.LogError(ex, "‚ùå Error al obtener informaci√≥n del usuario");
        return (1, "Usuario", "");
    }
}