@page "/cambiar-contrasena/{token}"
@rendermode InteractiveServer

<h3>Cambiar Contraseña</h3>

@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-info">@mensaje</div>
}

@if (mostrarFormulario)
{
    <div>
        <label for="nuevaContrasena">Nueva Contraseña:</label>
        <input type="password" @bind="nuevaContrasena" class="form-control" placeholder="Ingrese su nueva contraseña" />

        <label for="repetirContrasena" class="mt-2">Repita la Contraseña:</label>
        <input type="password" @bind="repetirContrasena" class="form-control" placeholder="Repita su nueva contraseña" />

        @if (!string.IsNullOrEmpty(errorValidacion))
        {
            <div class="text-danger mt-2">@errorValidacion</div>
        }

        <button @onclick="CambiarContrasenaAsync" class="btn btn-primary mt-2" disabled="@isLoading">
            @if (isLoading)
            {
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            }
            Cambiar Contraseña
        </button>
    </div>
}
else if (mostrarSolicitudToken)
{
    <div>
        <p>El token ha expirado. Por favor, solicite un nuevo token para continuar.</p>
        <button @onclick="SolicitarNuevoTokenAsync" class="btn btn-warning">
            Solicitar Nuevo Token
        </button>
    </div>
}

@code {
    [Parameter, Required]
    public string token { get; set; }

    private string nuevaContrasena = string.Empty;
    private string repetirContrasena = string.Empty;
    private string mensaje = string.Empty;
    private string errorValidacion = string.Empty;
    private bool isLoading = false;
    private bool mostrarFormulario = true;
    private bool mostrarSolicitudToken = false;


    protected override async Task OnParametersSetAsync()
    {
        if (!TokenState.IsInitialized)
        {
            try
            {
                var activationResponse = await Http.GetAsync($"api/Auth/activar-cuenta?token={Uri.EscapeDataString(token)}");
                if (activationResponse.IsSuccessStatusCode)
                {
                    var result = await activationResponse.Content.ReadFromJsonAsync<ActivationResponseDTO>();
                    TokenState.Token = result.Token;
                    mensaje = result.Message;
                    mostrarFormulario = true;
                    mostrarSolicitudToken = false;
                }
                else
                {
                    var errorMessage = await activationResponse.Content.ReadAsStringAsync();
                    if (errorMessage.Contains("expirado", StringComparison.OrdinalIgnoreCase))
                    {
                        mostrarFormulario = false;
                        mostrarSolicitudToken = true;
                        TokenState.Token = null; // Limpia el token si está expirado
                    }
                    else
                    {
                        mensaje = $"Error al activar la cuenta: {errorMessage}";
                    }
                }
            }
            catch (Exception ex)
            {
                mensaje = $"Error inesperado: {ex.Message}";
            }

            TokenState.IsInitialized = true;
        }
        else
        {
            mostrarFormulario = TokenState.Token != null && !mostrarSolicitudToken;
            mostrarSolicitudToken = TokenState.Token == null;
        }
    }

    private async Task CambiarContrasenaAsync()
    {
        if (string.IsNullOrEmpty(nuevaContrasena) || string.IsNullOrEmpty(repetirContrasena))
        {
            errorValidacion = "Debe ingresar y repetir la contraseña.";
            return;
        }

        if (nuevaContrasena != repetirContrasena)
        {
            errorValidacion = "Las contraseñas no coinciden.";
            return;
        }

        if (nuevaContrasena.Length < 8)
        {
            errorValidacion = "La contraseña debe tener al menos 8 caracteres.";
            return;
        }

        errorValidacion = string.Empty;
        isLoading = true;

        try
        {
            var response = await Http.PostAsJsonAsync("/api/Usuarios/CambiarContrasena",
                new { token = TokenState.Token, NuevaContrasena = nuevaContrasena });

            if (response.IsSuccessStatusCode)
            {
                mensaje = "Contraseña cambiada exitosamente.";
                TokenState.Token = string.Empty;
                mostrarFormulario = false;

                await JSRuntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Éxito",
                    text = "Su contraseña ha sido cambiada correctamente.",
                    icon = "success",
                    confirmButtonText = "OK"
                });
            }
            else
            {
                mensaje = $"Error al cambiar la contraseña: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error inesperado: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }



    private async Task SolicitarNuevoTokenAsync()
    {
        isLoading = true;

        try
        {
            // Enviar la solicitud solo con el token actual
            var response = await Http.PostAsJsonAsync("api/Auth/regenerar-token", new { token = token });

            if (response.IsSuccessStatusCode)
            {
                mensaje = "Se ha enviado un nuevo token a tu correo. Por favor, revisa tu bandeja de entrada.";
                mostrarSolicitudToken = false;
            }
            else
            {
                mensaje = $"Error al solicitar el token: {await response.Content.ReadAsStringAsync()}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error inesperado: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
