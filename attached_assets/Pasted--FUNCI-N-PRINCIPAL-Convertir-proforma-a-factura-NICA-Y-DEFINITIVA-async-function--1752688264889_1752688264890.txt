/**
 * ‚úÖ FUNCI√ìN PRINCIPAL: Convertir proforma a factura (√öNICA Y DEFINITIVA)
 */
async function convertirProformaAFactura(proformaId) {
    try {
        console.log('üîÑ === CONVIRTIENDO PROFORMA A FACTURA ===');
        console.log('üîÑ Proforma ID recibido:', proformaId);

        const confirmacion = await Swal.fire({
            title: '¬øConvertir proforma a factura?',
            html: `
                <div class="text-start">
                    <p><strong>Esta acci√≥n:</strong></p>
                    <ul>
                        <li>Cargar√° los productos de la proforma en el carrito</li>
                        <li>Abrir√° el modal de finalizaci√≥n para procesar el pago</li>
                        <li>Crear√° una factura oficial una vez completado</li>
                    </ul>
                    <div class="alert alert-warning mt-3">
                        <strong>Nota:</strong> La proforma original se marcar√° como "Convertida" 
                        despu√©s de crear la factura exitosamente.
                    </div>
                </div>
            `,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#28a745',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'S√≠, convertir',
            cancelButtonText: 'Cancelar'
        });

        if (!confirmacion.isConfirmed) {
            return;
        }

        // Mostrar loading
        Swal.fire({
            title: 'Cargando proforma...',
            text: 'Obteniendo detalles para conversi√≥n',
            icon: 'info',
            allowOutsideClick: false,
            showConfirmButton: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        // ‚úÖ OBTENER DETALLES DE LA PROFORMA
        const response = await fetch(`/Facturacion/ObtenerFacturaPorId/${proformaId}`, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }

        const resultado = await response.json();
        console.log('üîÑ Proforma obtenida:', resultado);

        const proforma = resultado.success ? resultado.data : resultado;

        if (!proforma || !proforma.detallesFactura || proforma.detallesFactura.length === 0) {
            throw new Error('La proforma no tiene productos v√°lidos');
        }

        // ‚úÖ VERIFICAR QUE LA PROFORMA EST√â VIGENTE
        if (proforma.estado !== 'Vigente') {
            Swal.fire({
                icon: 'warning',
                title: 'Proforma no vigente',
                text: `Solo se pueden convertir proformas vigentes. Estado actual: ${proforma.estado}`,
                confirmButtonColor: '#ffc107'
            });
            return;
        }

        // ‚úÖ LIMPIAR CARRITO ACTUAL
        productosEnVenta = [];
        clienteSeleccionado = null;

        // ‚úÖ CARGAR CLIENTE DE LA PROFORMA
        clienteSeleccionado = {
            clienteId: proforma.clienteId,
            nombre: proforma.nombreCliente,
            identificacion: proforma.identificacionCliente,
            telefono: proforma.telefonoCliente,
            email: proforma.emailCliente,
            direccion: proforma.direccionCliente
        };

        // ‚úÖ CARGAR PRODUCTOS DE LA PROFORMA
        for (const detalle of proforma.detallesFactura) {
            const producto = {
                productoId: detalle.productoId,
                nombreProducto: detalle.nombreProducto,
                descripcion: detalle.descripcionProducto || '',
                precio: detalle.precioUnitario,
                cantidad: detalle.cantidad,
                stockDisponible: detalle.stockDisponible || 999,
                metodoPago: 'efectivo'
            };

            productosEnVenta.push({
                productoId: producto.productoId,
                nombreProducto: producto.nombreProducto,
                precioUnitario: producto.precio,
                cantidad: producto.cantidad,
                stockDisponible: producto.stockDisponible,
                metodoPago: 'efectivo',
                imagenUrl: null
            });

            console.log('üîÑ Producto cargado:', producto.nombreProducto, 'x', producto.cantidad);
        }

        // ‚úÖ ACTUALIZAR INTERFAZ
        $('#clienteBusqueda').val(clienteSeleccionado.nombre);
        $('#nombreClienteSeleccionado').text(clienteSeleccionado.nombre);
        $('#emailClienteSeleccionado').text(clienteSeleccionado.email || 'Sin email');
        $('#clienteSeleccionado').removeClass('d-none');

        actualizarVistaCarrito();
        actualizarTotales();
        actualizarEstadoBotonFinalizar();

        // ‚úÖ CERRAR MODAL DE PROFORMAS SI EST√Å ABIERTO
        const modalProformas = bootstrap.Modal.getInstance(document.getElementById('proformasModal'));
        if (modalProformas) {
            modalProformas.hide();
        }

        // ‚úÖ GUARDAR REFERENCIA A LA PROFORMA ORIGINAL
        window.proformaOriginalParaConversion = {
            proformaId: proformaId,
            numeroProforma: proforma.numeroFactura
        };

        // ‚úÖ MOSTRAR √âXITO Y ABRIR MODAL DE FINALIZACI√ìN
        setTimeout(() => {
            Swal.close();

            Swal.fire({
                icon: 'success',
                title: 'Proforma cargada',
                text: `Se han cargado ${productosEnVenta.length} productos. Proceda a finalizar la venta.`,
                confirmButtonText: 'Continuar',
                confirmButtonColor: '#28a745',
                timer: 3000,
                timerProgressBar: true
            }).then(() => {
                mostrarModalFinalizarVenta();
            });
        }, 300);

        console.log('‚úÖ Proforma convertida exitosamente al carrito');

    } catch (error) {
        console.error('‚ùå Error convirtiendo proforma:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error al convertir',
            text: 'No se pudo convertir la proforma: ' + error.message,
            confirmButtonColor: '#dc3545'
        });
    }
}
