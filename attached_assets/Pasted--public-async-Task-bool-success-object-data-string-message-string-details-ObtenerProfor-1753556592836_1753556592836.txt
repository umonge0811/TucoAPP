        public async Task<(bool success, object data, string message, string details)> ObtenerProformasAsync(string jwtToken, string estado = null, int pagina = 1, int tamano = 20)
        {
            try
            {
                _logger.LogInformation("üìã === OBTENIENDO PROFORMAS DESDE SERVICIO ===");
                _logger.LogInformation("üìã Par√°metros: Estado={Estado}, P√°gina={Pagina}, Tama√±o={Tamano}", estado, pagina, tamano);

                using var client = new HttpClient();
                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", jwtToken);

                var queryParams = new List<string>
                {
                    $"pagina={pagina}",
                    $"tamano={tamano}"
                };

                if (!string.IsNullOrWhiteSpace(estado))
                {
                    queryParams.Add($"estado={Uri.EscapeDataString(estado)}");
                }

                var queryString = string.Join("&", queryParams);
                var url = $"{_baseUrl}/api/Facturacion/proformas?{queryString}";

                _logger.LogInformation("üìã URL construida: {Url}", url);

                var response = await client.GetAsync(url);

                if (response.IsSuccessStatusCode)
                {
                    var jsonContent = await response.Content.ReadAsStringAsync();
                    _logger.LogInformation("üìã Respuesta del API recibida exitosamente");

                    var apiResponse = System.Text.Json.JsonSerializer.Deserialize<JsonElement>(jsonContent);

                    // Verificar si la respuesta tiene la estructura correcta
                    if (apiResponse.TryGetProperty("success", out var successElement) && successElement.GetBoolean())
                    {
                        _logger.LogInformation("üìã API confirm√≥ √©xito en obtener proformas");

                        // Extraer las proformas del response
                        if (apiResponse.TryGetProperty("proformas", out var proformasElement))
                        {
                            var proformas = System.Text.Json.JsonSerializer.Deserialize<List<object>>(proformasElement.GetRawText());
                            var totalProformas = apiResponse.TryGetProperty("totalProformas", out var totalElement) ? totalElement.GetInt32() : 0;
                            var totalPaginas = apiResponse.TryGetProperty("totalPaginas", out var paginasElement) ? paginasElement.GetInt32() : 1;
                            var mensaje = apiResponse.TryGetProperty("message", out var msgElement) ? msgElement.GetString() : "Proformas obtenidas";

                            return (true, new
                            {
                                success = true,
                                proformas = proformas,
                                totalProformas = totalProformas,
                                pagina = pagina,
                                tamano = tamano,
                                totalPaginas = totalPaginas,
                                message = mensaje
                            }, mensaje, null);
                        }
                        else
                        {
                            _logger.LogWarning("üìã No se encontr√≥ propiedad 'proformas' en la respuesta del API");
                            return (false, null, "Estructura de respuesta inv√°lida", "Missing 'proformas' property");
                        }
                    }
                    else
                    {
                        var errorMsg = apiResponse.TryGetProperty("message", out var msgElement) ? 
                            msgElement.GetString() : "Error desconocido desde el API";
                        return (false, null, errorMsg, "API returned success=false");
                    }
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    _logger.LogError("üìã Error HTTP del API: {StatusCode} - {Content}", response.StatusCode, errorContent);
                    return (false, null, $"Error HTTP {response.StatusCode}", errorContent);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error cr√≠tico obteniendo proformas desde servicio");
                return (false, null, "Error interno del servicio", ex.Message);
            }
        }
