async function crearNuevaFactura(tipoDocumento = 'Factura') {
    try {
        console.log('🆕 === CREANDO NUEVO DOCUMENTO ===');
        console.log('🆕 Tipo de documento:', tipoDocumento);
        console.log('🆕 Es conversión de proforma:', !!window.proformaOriginalParaConversion);

        // ✅ NOTA: Esta función maneja:
        // - Creación de facturas normales
        // - Creación de proformas 
        // - Conversión de proformas a facturas (marca automáticamente la proforma como "Facturada")

        // Preparar datos de la venta con método de pago seleccionado
        const metodoPagoSeleccionado = esPagoMultiple ? 'multiple' : ($('input[name="metodoPago"]:checked').val() || 'efectivo');
        const configMetodo = esPagoMultiple ? CONFIGURACION_PRECIOS.efectivo : CONFIGURACION_PRECIOS[metodoPagoSeleccionado];

        // Validar pagos múltiples si es necesario
        if (esPagoMultiple && !validarPagosMultiples()) {
            return;
        }

        let subtotal = 0;

        // ✅ CALCULAR SUBTOTAL DE PRODUCTOS
        productosEnVenta.forEach(producto => {
            const precioAjustado = producto.precioUnitario * configMetodo.multiplicador;
            subtotal += precioAjustado * producto.cantidad;
        });

        // ✅ CALCULAR SUBTOTAL DE SERVICIOS
        if (window.serviciosEnVenta && window.serviciosEnVenta.length > 0) {
            window.serviciosEnVenta.forEach(servicio => {
                // Los servicios mantienen su precio base (no se ajustan por método de pago)
                const precioServicio = servicio.precioUnitario || servicio.precio || 0;
                subtotal += precioServicio * servicio.cantidad;
            });
        }

        const iva = subtotal * 0.13;
        const total = subtotal + iva;

        // ✅ DETERMINAR ESTADO Y PERMISOS SEGÚN EL TIPO DE DOCUMENTO
        let estadoFactura, mensajeExito, debeImprimir, debeAjustarInventario;
        let fechaVencimiento = null;
        console.log('🔐 === VERIFICACIÓN DE PERMISOS ===');
        console.log('🔐 puedeCompletarFacturas:', permisosUsuario.puedeCompletarFacturas);
        console.log('🔐 puedeCrearFacturas:', permisosUsuario.puedeCrearFacturas);
        console.log('🔐 tipoDocumento:', tipoDocumento);

        if (tipoDocumento === 'Proforma') {
            // ✅ PROFORMAS: Siempre estado "Vigente" con fecha de vencimiento
            estadoFactura = 'Vigente';
            mensajeExito = 'Proforma creada exitosamente';
            debeImprimir = true;
            debeAjustarInventario = false; // Las proformas NO ajustan inventario

            // ✅ CALCULAR FECHA DE VENCIMIENTO (30 días desde hoy)
            const fechaActual = new Date();
            fechaVencimiento = new Date(fechaActual.getTime() + (30 * 24 * 60 * 60 * 1000)); // +30 días
            console.log('📋 Creando proforma con estado VIGENTE');
            console.log('📅 Fecha de vencimiento calculada:', fechaVencimiento);
        } else if (permisosUsuario.puedeCompletarFacturas) {
            // ✅ USUARIOS CON PERMISO COMPLETAR: Venta completa e inmediata
            estadoFactura = 'Pagada';
            mensajeExito = 'Venta procesada exitosamente y marcada como pagada';
            debeImprimir = true;
            debeAjustarInventario = true;
            console.log('👑 Procesando con permiso CompletarFacturas - Factura pagada inmediatamente con ajuste de stock');
        } else if (permisosUsuario.puedeCrearFacturas) {
            // ✅ COLABORADORES: Factura pendiente para caja SIN AJUSTE DE STOCK
            estadoFactura = 'Pendiente';
            mensajeExito = 'Factura creada y enviada a Cajas para procesamiento de pago';
            debeImprimir = false;
            debeAjustarInventario = false; // ✅ CRUCIAL: NO ajustar stock para colaboradores
            console.log('📝 Procesando como colaborador - Factura pendiente para caja SIN ajuste de stock');
        } else {
            // ❌ SIN PERMISOS: No debería llegar aquí, pero como fallback
            throw new Error('No tienes permisos para procesar ventas');
        }

        console.log('📋 Estado determinado:', {
            tipoDocumento,
            estadoFactura,
            fechaVencimiento,
            debeImprimir,
            debeAjustarInventario,
            permisos: permisosUsuario
        });

        // Obtener información del usuario actual
        const usuarioActual = obtenerUsuarioActual();
        const usuarioId = usuarioActual?.usuarioId || usuarioActual?.id || 1;
        console.log('👤 Usuario actual para documento:', {
            usuario: usuarioActual,
            usuarioId: usuarioId
        });

        // ✅ CAPTURAR PRODUCTOS PENDIENTES DESDE LAS VARIABLES GLOBALES (solo para facturas)
        let productosPendientesParaEnvio = [];
        let tieneProductosPendientes = false;

        if (tipoDocumento === 'Factura' && window.productosPendientesEntrega && window.productosPendientesEntrega.length > 0) {
            console.log('📦 Productos pendientes detectados:', window.productosPendientesEntrega);
            productosPendientesParaEnvio = window.productosPendientesEntrega.map(producto => ({
                productoId: producto.productoId,
                nombreProducto: producto.nombreProducto || 'Sin nombre',
                cantidadSolicitada: producto.cantidadRequerida || producto.cantidadSolicitada || producto.cantidad || 0,
                cantidadPendiente: producto.cantidadPendiente || Math.max(0, (producto.cantidadRequerida || 0) - (producto.stockDisponible || 0)),
                stockDisponible: producto.stockDisponible || 0,
                precioUnitario: producto.precioUnitario || 0,
                observaciones: `Stock insuficiente al momento de la facturación`
            }));
            tieneProductosPendientes = true;
        }

        // ✅ CONSTRUIR OBSERVACIONES DINÁMICAMENTE
        let observacionesFinal = $('#observacionesVenta').val() || '';

        // Si es conversión de proforma, agregar información en observaciones
        if (window.proformaOriginalParaConversion) {
            const numeroProforma = window.proformaOriginalParaConversion.numeroProforma;
            const textoProforma = `Convertido desde proforma ${numeroProforma}`;

            if (observacionesFinal && !observacionesFinal.includes(textoProforma)) {
                observacionesFinal = `${observacionesFinal}. ${textoProforma}`;
            } else if (!observacionesFinal) {
                observacionesFinal = textoProforma;
            }

            console.log('📝 Observaciones con información de proforma:', observacionesFinal);
        }

        // Crear objeto de factura para enviar a la API
        const facturaData = {
            clienteId: clienteSeleccionado?.clienteId || clienteSeleccionado?.id || null,
            nombreCliente: clienteSeleccionado?.nombre || 'Cliente General',
            identificacionCliente: clienteSeleccionado?.identificacion || '',
            telefonoCliente: clienteSeleccionado?.telefono || '',
            emailCliente: clienteSeleccionado?.email || '',
            direccionCliente: clienteSeleccionado?.direccion || '',
            fechaFactura: new Date().toISOString(),
            fechaVencimiento: fechaVencimiento ? fechaVencimiento.toISOString() : null,
            subtotal: subtotal,
            descuentoGeneral: 0,
            porcentajeImpuesto: 13,
            montoImpuesto: iva,
            total: total,
            estado: estadoFactura,
            tipoDocumento: tipoDocumento,
            metodoPago: metodoPagoSeleccionado,
            observaciones: observacionesFinal, // ✅ USAR OBSERVACIONES CONSTRUIDAS DINÁMICAMENTE
            usuarioCreadorId: usuarioId,

            // ✅ INCLUIR PRODUCTOS PENDIENTES SI EXISTEN (solo para facturas)
            productosPendientesEntrega: productosPendientesParaEnvio,
            tieneProductosPendientes: tieneProductosPendientes,

            detallesPago: esPagoMultiple ? detallesPagoActuales.map(pago => ({
                metodoPago: pago.metodoPago,
                monto: pago.monto,
                referencia: pago.referencia || '',
                observaciones: pago.observaciones || '',
                fechaPago: new Date().toISOString()
            })) : [],

            detallesFactura: [
                // ✅ PROCESAR PRODUCTOS
                ...productosEnVenta.map(producto => {
                    const precioAjustado = producto.precioUnitario * configMetodo.multiplicador;

                    // ✅ CONSTRUIR NOMBRE COMPLETO CON MEDIDA SI ES LLANTA O TIPO SI ES SERVICIO
                    let nombreCompletoProducto = producto.nombreProducto;
                    if (producto.esServicio) {
                        nombreCompletoProducto = `[SERVICIO] ${producto.nombreProducto}`;
                        if (producto.observaciones) {
                            nombreCompletoProducto += ` - ${producto.observaciones}`;
                        }
                    } else if (producto.esLlanta && producto.medidaCompleta) {
                        nombreCompletoProducto = `${producto.medidaCompleta} ${producto.nombreProducto}`;
                    }

                    return {
                        productoId: producto.esServicio ? null : producto.productoId,
                        servicioId: producto.esServicio ? producto.servicioId : null,
                        nombreProducto: nombreCompletoProducto,
                        descripcionProducto: producto.descripcion || '',
                        cantidad: producto.cantidad,
                        precioUnitario: precioAjustado,
                        porcentajeDescuento: 0,
                        montoDescuento: 0,
                        subtotal: precioAjustado * producto.cantidad,
                        esServicio: producto.esServicio || false
                    };
                }),

                // ✅ PROCESAR SERVICIOS
                ...(window.serviciosEnVenta || []).map(servicio => {
                    const precioServicio = servicio.precioUnitario || servicio.precio || 0;
                    let nombreCompletoServicio = `[SERVICIO] ${servicio.nombreProducto}`;

                    if (servicio.tipoServicio) {
                        nombreCompletoServicio += ` - ${servicio.tipoServicio}`;
                    }
                    if (servicio.observaciones) {
                        nombreCompletoServicio += ` - ${servicio.observaciones}`;
                    }

                    return {
                        productoId: null,
                        servicioId: servicio.servicioId,
                        nombreProducto: nombreCompletoServicio,
                        descripcionProducto: servicio.descripcion || '',
                        cantidad: servicio.cantidad,
                        precioUnitario: precioServicio,
                        porcentajeDescuento: 0,
                        montoDescuento: 0,
                        subtotal: precioServicio * servicio.cantidad,
                        esServicio: true
                    };
                })
            ]
        };

        console.log('📋 Datos de documento preparados:', facturaData);

        // Crear la factura/proforma
        const response = await fetch('/Facturacion/CrearFactura', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(facturaData)
        });

        if (!response.ok) {
            const errorText = await response.text();
            console.error('❌ Error del servidor al crear documento:', errorText);
            throw new Error(`Error al crear el documento: ${response.status} - ${errorText}`);
        }

        const resultadoFactura = await response.json();
        console.log('✅ Documento creado:', resultadoFactura);

        if (resultadoFactura.success) {
            // ✅ MARCAR PROFORMA COMO FACTURADA SI ES UNA CONVERSIÓN
            if (window.proformaOriginalParaConversion) {
                console.log('🔄 === MARCANDO PROFORMA COMO FACTURADA ===');
                console.log('🔄 Proforma original:', window.proformaOriginalParaConversion);

                // ✅ VALIDAR QUE TENEMOS EL ID DE LA PROFORMA
                const proformaId = window.proformaOriginalParaConversion.proformaId || window.proformaOriginalParaConversion.facturaId;
                console.log('🔄 ID de proforma a marcar:', proformaId);

                if (!proformaId) {
                    console.error('❌ No se pudo obtener el ID de la proforma para marcar como facturada');
                } else {
                    try {
                        const responseConversion = await fetch(`/Facturacion/MarcarProformaFacturada?proformaId=${proformaId}`, {
                            method: 'PUT',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({})
                        });

                        const responseText = await responseConversion.text();
                        console.log('🔄 Respuesta del servidor:', responseText);

                        if (responseConversion.ok) {
                            const resultadoConversion = JSON.parse(responseText);
                            console.log('✅ Proforma marcada como facturada exitosamente:', resultadoConversion);
                        } else {
                            console.warn('⚠️ Error marcando proforma como facturada:', responseConversion.status, responseText);
                        }
                    } catch (error) {
                        console.warn('⚠️ Error en conversión de proforma, pero la factura se creó:', error);
                    }
                }

                // Limpiar referencia
                delete window.proformaOriginalParaConversion;
            }

            // ✅ REGISTRAR PRODUCTOS PENDIENTES SI EXISTEN (solo para facturas)
            if (tipoDocumento === 'Factura' && tieneProductosPendientes && productosPendientesParaEnvio.length > 0) {
                console.log('📦 === REGISTRANDO PRODUCTOS PENDIENTES DESPUÉS DE CREAR FACTURA ===');
                console.log('📦 Productos pendientes:', productosPendientesParaEnvio);
                console.log('📦 Factura creada ID:', resultadoFactura.facturaId || resultadoFactura.data?.facturaId);
                const facturaIdCreada = resultadoFactura.facturaId || resultadoFactura.data?.facturaId;
                if (facturaIdCreada) {
                    await registrarProductosPendientesEntrega(facturaIdCreada, productosPendientesParaEnvio);
                } else {
                    console.warn('⚠️ No se pudo obtener ID de factura para registrar pendientes');
                }
            }

            // ✅ PROCESAR SEGÚN EL TIPO DE DOCUMENTO Y USUARIO
            if (tipoDocumento === 'Proforma') {
                // ✅ PROFORMAS: Mostrar confirmación y generar recibo
                console.log('📋 Proforma creada - Generando recibo');
                // ✅ CERRAR MODAL DE FINALIZAR VENTA INMEDIATAMENTE
                modalFinalizarVenta.hide();
                // ✅ GENERAR RECIBO PARA PROFORMA
                generarReciboFacturaCompletada(resultadoFactura, [...productosEnVenta, ...(window.serviciosEnVenta || [])], metodoPagoSeleccionado);
                // ✅ MOSTRAR SWEETALERT DE CONFIRMACIÓN
                Swal.fire({
                    icon: 'success',
                    title: '¡Proforma Creada!',
                    html: `
                        <div class="text-center">
                            <p><strong>Proforma:</strong> ${resultadoFactura.numeroFactura || 'N/A'}</p>
                            <p><strong>Válida hasta:</strong> ${fechaVencimiento ? fechaVencimiento.toLocaleDateString('es-CR') : 'N/A'}</p>
                            <div class="alert alert-info mt-3">
                                <small><strong>Nota:</strong> Esta proforma tiene validez por 30 días calendario</small>
                            </div>
                        </div>
                    `,
                    confirmButtonText: 'Continuar',
                    confirmButtonColor: '#28a745',
                    timer: 5000,
                    timerProgressBar: true
                });
            } else if (estadoFactura === 'Pendiente') {
                // ✅ COLABORADORES: Modal específico de envío a cajas
                console.log('📋 Factura pendiente - Mostrando modal de envío a cajas');
                // ✅ CERRAR MODAL DE FINALIZAR VENTA INMEDIATAMENTE
                modalFinalizarVenta.hide();
                // ✅ ACTUALIZAR VISTA DE PRODUCTOS (sin ajuste de stock)
                await actualizarVistaProductosPostAjuste();
                // Para colaboradores: mostrar modal específico de envío a cajas
                setTimeout(() => {
                    mostrarModalFacturaPendiente(resultadoFactura);
                }, 300);
            } else if (estadoFactura === 'Pagada') {
                // ✅ ADMINISTRADORES/CAJEROS: Venta completa con ajuste de stock
                console.log('💰 Factura pagada - Procesando venta completa');
                // ✅ AJUSTAR STOCK SOLO PARA FACTURAS PAGADAS
                if (debeAjustarInventario) {
                    console.log('💰 === INICIO AJUSTE INVENTARIO FRONTEND ===');
                    console.log('💰 Usuario autorizado - Ajustando inventario automáticamente');
                    // ✅ PROTECCIÓN CONTRA DOBLE EJECUCIÓN
                    const facturaNumero = resultadoFactura.numeroFactura || 'N/A';
                    const cacheKey = `stock_ajustado_${facturaNumero}`;
                    if (window[cacheKey]) {
                        console.log('⚠️ Stock ya fue ajustado para esta factura, saltando ajuste');
                    } else {
                        // Marcar como en proceso
                        window[cacheKey] = true;
                        try {
                            const productosParaAjuste = productosEnVenta.map(producto => ({
                                ProductoId: producto.productoId,
                                NombreProducto: producto.nombreProducto,
                                Cantidad: producto.cantidad
                            }));
                            const requestData = {
                                NumeroFactura: facturaNumero,
                                Productos: productosParaAjuste
                            };
                            console.log('📦 Ajustando stock para productos:', productosParaAjuste);
                            const responseStock = await fetch('/Facturacion/AjustarStockFacturacion', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest'
                                },
                                body: JSON.stringify(requestData)
                            });
                            if (responseStock.ok) {
                                const resultadoStock = await responseStock.json();
                                console.log('✅ Stock ajustado exitosamente');
                                // ✅ ACTUALIZAR VISTA DE PRODUCTOS DESPUÉS DEL AJUSTE
                                await actualizarVistaProductosPostAjuste();
                            } else {
                                console.error('❌ Error ajustando stock');
                                console.warn('❌ Error ajustando stock - sin toast');
                            }
                        } catch (error) {
                            console.error('❌ Error general ajustando stock:', error);
                            console.warn('❌ Error inesperado ajustando inventario - sin toast');
                            delete window[cacheKey];
                        }
                    }
                    console.log('💰 === FIN AJUSTE INVENTARIO FRONTEND ===');
                }
                // ✅ GENERAR E IMPRIMIR RECIBO PARA FACTURAS PAGADAS
                if (debeImprimir) {
                    console.log('🖨️ Generando recibo para nueva factura pagada:', resultadoFactura);
                    // ✅ USAR LA FUNCIÓN ESPECÍFICA PARA FACTURAS COMPLETADAS
                    generarReciboFacturaCompletada(resultadoFactura, [...productosEnVenta, ...(window.serviciosEnVenta || [])], metodoPagoSeleccionado);
                }
                // ✅ CERRAR MODAL INMEDIATAMENTE DESPUÉS DE PROCESAR
                modalFinalizarVenta.hide();
                // ✅ MOSTRAR SWEETALERT EN LUGAR DE TOAST
                Swal.fire({
                    icon: 'success',
                    title: '¡Venta Completada!',
                    text: `Factura ${resultadoFactura.numeroFactura || 'N/A'} procesada exitosamente`,
                    confirmButtonText: 'Continuar',
                    confirmButtonColor: '#28a745',
                    timer: 3000,
                    timerProgressBar: true
                });
            }

            // ✅ LIMPIAR CARRITO DESPUÉS DE PROCESAR (PARA TODOS LOS CASOS)
            productosEnVenta = [];

            // ✅ LIMPIAR SERVICIOS TAMBIÉN
            if (window.serviciosEnVenta) {
                window.serviciosEnVenta = [];
            }

            clienteSeleccionado = null;
            $('#clienteBusqueda').val('');
            $('#clienteSeleccionado').addClass('d-none');
            actualizarVistaCarrito();
            actualizarTotales();
            actualizarEstadoBotonFinalizar();

            // ✅ LIMPIAR VARIABLES DE PRODUCTOS PENDIENTES Y CÓDIGOS DE SEGUIMIENTO
            if (window.productosPendientesEntrega) {
                delete window.productosPendientesEntrega;
            }
            if (window.facturaConPendientes) {
                delete window.facturaConPendientes;
            }

            // ✅ LIMPIAR CÓDIGOS DE SEGUIMIENTO DESPUÉS DE UN DELAY PARA QUE SE USEN EN EL RECIBO
            setTimeout(() => {
                if (window.codigosSeguimientoPendientes) {
                    console.log('🧹 Limpiando códigos de seguimiento después del recibo');
                    delete window.codigosSeguimientoPendientes;
                }
            }, 3000); // 3 segundos de delay para que se use en el recibo

            // ✅ ACTUALIZAR VISTA DE PRODUCTOS DESPUÉS DE COMPLETAR LA OPERACIÓN
            setTimeout(async () => {
                try {
                    await actualizarVistaProductosPostAjuste();
                } catch (error) {
                    console.error('❌ Error actualizando vista después de operación:', error);
                }
            }, 500);
        } else {
            // ✅ MOSTRAR ERROR CON SWEETALERT
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'error',
                    title: 'Error al procesar',
                    text: resultadoFactura.message || 'Error desconocido',
                    confirmButtonText: 'Entendido',
                    confirmButtonColor: '#dc3545'
                });
            } else {
                alert('Error: ' + (resultadoFactura.message || 'Error al procesar'));
            }
        }
    } catch (error) {
        console.error('❌ Error creando nuevo documento:', error);
        throw error;
    }
}
