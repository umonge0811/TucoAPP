/**
 * ‚úÖ FUNCI√ìN: Re-imprimir factura existente desde modal de detalles
 */
async function reimprimirFacturaDesdeModal(facturaId, numeroFactura) {
    try {
        console.log('üñ®Ô∏è === INICIANDO RE-IMPRESI√ìN DE FACTURA DESDE MODAL ===');
        console.log('üñ®Ô∏è Factura ID:', facturaId);
        console.log('üñ®Ô∏è N√∫mero de factura:', numeroFactura);

        // Guardar texto original del bot√≥n
        const $btn = $('#btnImprimirFacturaModal');
        const textoOriginal = $btn.html();
        $btn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm me-2"></span>Imprimiendo...');

        // Obtener detalles completos de la factura
        const response = await fetch(`/Facturacion/ObtenerDetalleFactura/${facturaId}`, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }

        const resultado = await response.json();
        console.log('üñ®Ô∏è Detalles de factura obtenidos:', resultado);

        if (resultado.success && resultado.factura) {
            const factura = resultado.factura;
            
            // Preparar datos para el recibo
            const datosFactura = {
                numeroFactura: factura.numeroFactura || numeroFactura,
                nombreCliente: factura.nombreCliente || 'Cliente General',
                usuarioCreadorNombre: factura.usuarioCreadorNombre || 'Sistema'
            };

            // Preparar productos para el recibo
            const productosParaRecibo = factura.detallesFactura ? factura.detallesFactura.map(detalle => ({
                nombreProducto: detalle.nombreProducto || 'Producto',
                cantidad: detalle.cantidad || 1,
                precioUnitario: detalle.precioUnitario || 0,
                esLlanta: detalle.esLlanta || false,
                medidaCompleta: detalle.medidaCompleta || null
            })) : [];

            // Preparar totales
            const totalesRecibo = {
                subtotal: factura.subtotal || 0,
                iva: factura.montoImpuesto || 0,
                total: factura.total || 0,
                metodoPago: factura.metodoPago || 'Efectivo',
                cliente: {
                    nombre: factura.nombreCliente || 'Cliente General'
                },
                usuario: {
                    nombre: factura.usuarioCreadorNombre || 'Sistema'
                }
            };

            // Verificar si tiene detalles de pago m√∫ltiple
            if (factura.detallesPago && factura.detallesPago.length > 1) {
                totalesRecibo.detallesPago = factura.detallesPago;
                totalesRecibo.metodoPago = 'Multiple';
                console.log('üñ®Ô∏è Factura con pago m√∫ltiple detectado');
            }

            console.log('üñ®Ô∏è Generando recibo para re-impresi√≥n...');
            
            // Generar el recibo usando la funci√≥n existente
            if (typeof generarRecibo === 'function') {
                generarRecibo(datosFactura, productosParaRecibo, totalesRecibo);
                mostrarToast('Impresi√≥n', `Factura ${numeroFactura} enviada a impresi√≥n`, 'success');
            } else {
                console.error('‚ùå Funci√≥n generarRecibo no est√° disponible');
                mostrarToast('Error', 'Funci√≥n de impresi√≥n no disponible', 'danger');
            }

        } else {
            throw new Error(resultado.message || 'No se pudieron obtener los detalles de la factura');
        }

    } catch (error) {
        console.error('‚ùå Error re-imprimiendo factura:', error);
        mostrarToast('Error', 'No se pudo re-imprimir la factura: ' + error.message, 'danger');
        // ‚úÖ C√ìDIGO CORREGIDO:
    } finally {
        // Restaurar bot√≥n
        const $btn = $('#btnImprimirFacturaModal');
        $btn.prop('disabled', false).html('<i class="bi bi-printer me-1"></i>Imprimir');
    }
}
