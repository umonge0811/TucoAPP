@page "/cambiar-contrasena/{token}"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Web
@using TucoWEB.Services
@inject TokenStateService TokenState
@rendermode InteractiveServer
@* @rendermode InteractiveWebAssembly *@


<h3>Cambiar Contraseña</h3>
@if (!string.IsNullOrEmpty(mensaje))
{
    <div class="alert alert-info">@mensaje</div>
}

@if (!string.IsNullOrEmpty(token))
{
    <div>
        <label for="nuevaContrasena">Nueva Contraseña:</label>
        <input type="password" @bind="nuevaContrasena" class="form-control" />
        <button @onclick="CambiarContrasenaAsync" aria-label="Cambiar contraseña" class="btn btn-primary mt-2">
            Cambiar Contraseña
        </button>
    </div>
}
else
{
    <div class="alert alert-danger">No se puede procesar el cambio de contraseña.</div>
}

@code {

    [Parameter, Required]
    public string token { get; set; }

    private string nuevaContrasena = string.Empty;
    private string mensaje = string.Empty;
    private bool isLoading = false;
    private bool initialized  = false;
    private string tempToken = string.Empty; // Nueva variable para almacenar el token temporal


    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
    }


    protected override async Task OnParametersSetAsync() {

        if (!TokenState.IsInitialized)
        {

            try
            {
                var activationResponse = await Http.GetAsync($"api/Auth/activar-cuenta?token={Uri.EscapeDataString(token)}");
                if (activationResponse.IsSuccessStatusCode)
                {
                    var result = await activationResponse.Content.ReadFromJsonAsync<ActivationResponseDTO>();
                    TokenState.Token = result.Token; // Guardamos en variable temporal
                    mensaje = result.Message;
                }
            }
            catch (Exception ex)
            {
                mensaje = "Error al procesar la solicitud.";
            }
            TokenState.IsInitialized = true;
        }
    }



    private async Task CambiarContrasenaAsync()
    {
        if (string.IsNullOrEmpty(nuevaContrasena))
        {
            mensaje = "Por favor, ingrese una nueva contraseña.";
            return;
        }

        isLoading = true; // Deshabilitar botón mientras se procesa

        try
        {
            // Usamos tempToken en lugar de token
            var response = await Http.PostAsJsonAsync("/api/Usuarios/CambiarContrasena",
                new { token = TokenState.Token, NuevaContrasena = nuevaContrasena });
            // Llamada al endpoint para cambiar contraseña
           // var response = await Http.PostAsJsonAsync("/api/Usuarios/CambiarContrasena", new { token, NuevaContrasena = nuevaContrasena });

            if (response.IsSuccessStatusCode)
            {
                mensaje = "Contraseña cambiada exitosamente.";
                TokenState.Token = string.Empty; // Limpiar token
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                mensaje = $"Error al cambiar la contraseña: {errorMessage}";
            }
        }
        catch (Exception ex)
        {
            mensaje = $"Error inesperado: {ex.Message}";
        }
        finally
        {
            isLoading = false; // Habilitar botón al finalizar
        }
    }
}
