async function procesarVentaFinal() {
    const $btnFinalizar = $('#btnConfirmarVenta');

    try {
        $btnFinalizar.prop('disabled', true).html('<span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>Procesando...');

        console.log('üîç === PROCESANDO VENTA FINAL ===');
        console.log('üîç Es pago m√∫ltiple:', esPagoMultiple);
        console.log('üîç Detalles de pago actuales:', detallesPagoActuales);

        // ‚úÖ VALIDAR PAGOS M√öLTIPLES SI ES NECESARIO
        if (esPagoMultiple && !validarPagosMultiples()) {
            $btnFinalizar.prop('disabled', false).html('<i class="bi bi-check-circle me-2"></i>Finalizar Venta');
            return;
        }

        const esFacturaPendiente = productosEnVenta.some(p => p.facturaId);
        const facturaId = esFacturaPendiente ? productosEnVenta[0].facturaId : null;

        console.log('üîç Es factura pendiente:', esFacturaPendiente);
        console.log('üîç Factura ID:', facturaId);

        if (esFacturaPendiente && facturaId) {
            // ‚úÖ COMPLETAR FACTURA EXISTENTE
            console.log('‚úÖ Completando factura pendiente ID:', facturaId);
            await completarFacturaExistente(facturaId);
        } else {
            // ‚úÖ CREAR NUEVA FACTURA NORMAL
            console.log('üÜï Creando nueva factura');
            await crearNuevaFactura();
        }

    } catch (error) {
        console.error('‚ùå Error procesando venta:', error);
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                icon: 'error',
                title: 'Error procesando la venta',
                text: 'Hubo un problema inesperado al procesar la venta',
                confirmButtonText: 'Entendido',
                confirmButtonColor: '#dc3545'
            });
        } else {
            alert('Error: Hubo un problema procesando la venta');
        }
    } finally {
        $btnFinalizar.prop('disabled', false).html('<i class="bi bi-check-circle me-2"></i>Finalizar Venta');
    }
}
