        [HttpGet("proformas")]
        [Authorize]
        public async Task<ActionResult<IEnumerable<FacturaDTO>>> ObtenerProformas(
            [FromQuery] string? estado = null,
            [FromQuery] string? busquedaGeneral = null,
            [FromQuery] string? busqueda = null,
            [FromQuery] int pagina = 1,
            [FromQuery] int tamano = 20)
        {
            try
            {
                _logger.LogInformation("üìã === OBTENIENDO PROFORMAS CON FILTROS ===");
                _logger.LogInformation("üìã Par√°metros recibidos: Estado={Estado}, BusquedaGeneral={BusquedaGeneral}, Busqueda={Busqueda}, P√°gina={Pagina}, Tama√±o={Tamano}", 
                    estado, busquedaGeneral, busqueda, pagina, tamano);

                var query = _context.Facturas
                    .Include(f => f.UsuarioCreador)
                    .Include(f => f.DetallesFactura)
                    .Where(f => f.TipoDocumento == "Proforma");

                var totalSinFiltros = await query.CountAsync();
                _logger.LogInformation("üìã Total de proformas sin filtros: {Total}", totalSinFiltros);

                // ‚úÖ APLICAR FILTRO DE ESTADO
                if (!string.IsNullOrWhiteSpace(estado) && estado != "todos")
                {
                    query = query.Where(f => f.Estado == estado);
                    var totalConEstado = await query.CountAsync();
                    _logger.LogInformation("üìã Despu√©s de filtro estado '{Estado}': {Total} proformas", estado, totalConEstado);
                }

                // ‚úÖ APLICAR FILTRO DE B√öSQUEDA (busquedaGeneral tiene prioridad sobre busqueda)
                var terminoBusqueda = !string.IsNullOrWhiteSpace(busquedaGeneral) ? busquedaGeneral : busqueda;
                if (!string.IsNullOrWhiteSpace(terminoBusqueda))
                {
                    var termino = terminoBusqueda.Trim().ToLower();
                    query = query.Where(f => 
                        f.NumeroFactura.ToLower().Contains(termino) ||
                        f.NombreCliente.ToLower().Contains(termino) ||
                        (f.IdentificacionCliente != null && f.IdentificacionCliente.ToLower().Contains(termino)) ||
                        (f.TelefonoCliente != null && f.TelefonoCliente.ToLower().Contains(termino)) ||
                        (f.EmailCliente != null && f.EmailCliente.ToLower().Contains(termino)));
                    
                    var totalConBusqueda = await query.CountAsync();
                    _logger.LogInformation("üìã Despu√©s de filtro b√∫squeda '{Termino}': {Total} proformas", termino, totalConBusqueda);
                }

                var totalRegistros = await query.CountAsync();
                _logger.LogInformation("üìã Total final despu√©s de todos los filtros: {Total}", totalRegistros);

                var proformas = await query
                    .OrderByDescending(f => f.FechaCreacion)
                    .Skip((pagina - 1) * tamano)
                    .Take(tamano)
                    .Select(f => new FacturaDTO
                    {
                        FacturaId = f.FacturaId,
                        NumeroFactura = f.NumeroFactura,
                        ClienteId = f.ClienteId,
                        NombreCliente = f.NombreCliente,
                        IdentificacionCliente = f.IdentificacionCliente,
                        TelefonoCliente = f.TelefonoCliente,
                        EmailCliente = f.EmailCliente,
                        DireccionCliente = f.DireccionCliente,
                        FechaFactura = f.FechaFactura,
                        FechaVencimiento = f.FechaVencimiento,
                        Subtotal = f.Subtotal,
                        DescuentoGeneral = f.DescuentoGeneral,
                        PorcentajeImpuesto = f.PorcentajeImpuesto,
                        MontoImpuesto = f.MontoImpuesto ?? 0,
                        Total = f.Total,
                        Estado = f.Estado,
                        TipoDocumento = f.TipoDocumento,
                        MetodoPago = f.MetodoPago,
                        Observaciones = f.Observaciones,
                        UsuarioCreadorId = f.UsuarioCreadorId,
                        UsuarioCreadorNombre = f.UsuarioCreador.NombreUsuario,
                        FechaCreacion = f.FechaCreacion,
                        FechaActualizacion = f.FechaActualizacion,
                        DetallesFactura = f.DetallesFactura.Select(d => new DetalleFacturaDTO
                        {
                            DetalleFacturaId = d.DetalleFacturaId,
                            ProductoId = d.ProductoId,
                            NombreProducto = d.NombreProducto,
                            DescripcionProducto = d.DescripcionProducto,
                            Cantidad = d.Cantidad,
                            PrecioUnitario = d.PrecioUnitario,
                            PorcentajeDescuento = d.PorcentajeDescuento,
                            MontoDescuento = d.MontoDescuento,
                            Subtotal = d.Subtotal
                        }).ToList()
                    })
                    .ToListAsync();

                _logger.LogInformation("‚úÖ Se obtuvieron {Count} proformas de {Total} total", proformas.Count, totalRegistros);

                return Ok(new
                {
                    success = true,
                    proformas = proformas,
                    totalProformas = totalRegistros,
                    pagina = pagina,
                    tamano = tamano,
                    totalPaginas = (int)Math.Ceiling((double)totalRegistros / tamano),
                    message = $"Se encontraron {proformas.Count} proformas"
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error al obtener proformas");
                return StatusCode(500, new { 
                    success = false,
                    message = "Error al obtener proformas",
                    timestamp = DateTime.Now 
                });
            }
        }
