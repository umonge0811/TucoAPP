async function convertirProformaAFactura(proformaEscapada) {
    try {
        console.log('üîÑ === CONVIRTIENDO PROFORMA A FACTURA ===');
        console.log('üîÑ Proforma escapada recibida:', proformaEscapada);
        console.log('üîÑ Tipo de dato recibido:', typeof proformaEscapada);

        // ‚úÖ MANEJO ROBUSTO DE DIFERENTES FORMATOS DE ENTRADA
        let proforma;

        if (typeof proformaEscapada === 'string') {
            // Si es una cadena, verificar si est√° escapada
            if (proformaEscapada.includes('&quot;')) {
                // Cadena escapada, aplicar replace y parsear
                proforma = JSON.parse(proformaEscapada.replace(/&quot;/g, '"'));
                console.log('üîÑ Proforma parseada desde cadena escapada');
            } else {
                // Cadena JSON normal
                proforma = JSON.parse(proformaEscapada);
                console.log('üîÑ Proforma parseada desde cadena JSON');
            }
        } else if (typeof proformaEscapada === 'object' && proformaEscapada !== null) {
            // Si ya es un objeto, usarlo directamente
            proforma = proformaEscapada;
            console.log('üîÑ Proforma recibida como objeto directo');
        } else {
            throw new Error('Formato de proforma no v√°lido: ' + typeof proformaEscapada);
        }

        console.log('üîÑ Proforma deserializada:', proforma);

        // Confirmar conversi√≥n
        const confirmacion = await Swal.fire({
            title: '¬øConvertir proforma a factura?',
            html: `
                <div class="text-start">
                    <p><strong>Proforma:</strong> ${proforma.numeroFactura || 'N/A'}</p>
                    <p><strong>Cliente:</strong> ${proforma.nombreCliente || 'Cliente General'}</p>
                    <p><strong>Total:</strong> ‚Ç°${formatearMoneda(proforma.total)}</p>
                    <hr>
                    <p><strong>Esta acci√≥n:</strong></p>
                    <ul>
                        <li>Cargar√° los productos de la proforma en el carrito</li>
                        <li>Procesar√° la venta directamente</li>
                        <li>Crear√° una factura oficial inmediatamente</li>
                    </ul>
                </div>
            `,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#28a745',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'S√≠, convertir',
            cancelButtonText: 'Cancelar'
        });

        if (!confirmacion.isConfirmed) {
            return;
        }

        // Verificar que la proforma est√© vigente
        if (proforma.estado !== 'Vigente') {
            Swal.fire({
                icon: 'warning',
                title: 'Proforma no vigente',
                text: `Solo se pueden convertir proformas vigentes. Estado actual: ${proforma.estado}`,
                confirmButtonColor: '#ffc107'
            });
            return;
        }

        // Limpiar carrito actual y servicios
        productosEnVenta = [];
        serviciosEnVenta = []; // ‚úÖ LIMPIAR SERVICIOS TAMBI√âN
        clienteSeleccionado = null;

        console.log('üîÑ === CARGANDO DATOS DE PROFORMA EN EL CARRITO ===');

        // Cargar cliente de la proforma
        clienteSeleccionado = {
            clienteId: proforma.clienteId || null,
            nombre: proforma.nombreCliente || 'Cliente General',
            identificacion: proforma.identificacionCliente || '',
            telefono: proforma.telefonoCliente || '',
            email: proforma.emailCliente || '',
            direccion: proforma.direccionCliente || ''
        };

        console.log('üë§ Cliente cargado desde proforma:', clienteSeleccionado);

        // ‚úÖ CARGAR PRODUCTOS Y SERVICIOS DE LA PROFORMA
        if (proforma.detallesFactura && Array.isArray(proforma.detallesFactura)) {
            console.log('üì¶ Cargando detalles desde proforma:', proforma.detallesFactura.length);
            proforma.detallesFactura.forEach((detalle, index) => {
                console.log(`üîç Procesando detalle ${index + 1}:`, detalle);
                // ‚úÖ VERIFICAR SI ES UN SERVICIO
                const esServicio = detalle.esServicio ||
                    detalle.servicioId ||
                    detalle.nombreProducto?.includes('[SERVICIO]') ||
                    (!detalle.productoId && detalle.servicioId);
                if (esServicio) {
                    // ‚úÖ ES UN SERVICIO - Agregarlo al array de servicios
                    const servicio = {
                        servicioId: detalle.servicioId || null,
                        nombreProducto: detalle.nombreProducto || 'Servicio',
                        nombre: detalle.nombreProducto?.replace('[SERVICIO] ', '') || 'Servicio',
                        descripcion: detalle.descripcionProducto || '',
                        precio: detalle.precioUnitario || 0,
                        cantidad: detalle.cantidad || 1,
                        subtotal: (detalle.precioUnitario || 0) * (detalle.cantidad || 1),
                        esServicio: true
                    };
                    serviciosEnVenta.push(servicio);
                    console.log(`üîß Servicio ${index + 1} cargado:`, servicio.nombre, 'x', servicio.cantidad);
                } else {
                    // ‚úÖ ES UN PRODUCTO - Agregarlo al array de productos
                    const producto = {
                        productoId: detalle.productoId || 0,
                        nombreProducto: detalle.nombreProducto || 'Producto',
                        precioUnitario: detalle.precioUnitario || 0,
                        cantidad: detalle.cantidad || 1,
                        stockDisponible: detalle.stockDisponible || 999,
                        metodoPago: 'efectivo',
                        imagenUrl: null,
                        esServicio: false
                    };
                    productosEnVenta.push(producto);
                    console.log(`üì¶ Producto ${index + 1} cargado:`, producto.nombreProducto, 'x', producto.cantidad);
                }
            });
        }
        console.log('üì¶ Total productos cargados en carrito:', productosEnVenta.length);
        console.log('üîß Total servicios cargados en carrito:', serviciosEnVenta.length);

        // Actualizar interfaz del cliente
        $('#clienteBusqueda').val(clienteSeleccionado.nombre);
        $('#nombreClienteSeleccionado').text(clienteSeleccionado.nombre);
        $('#emailClienteSeleccionado').text(clienteSeleccionado.email || 'Sin email');
        $('#clienteSeleccionado').removeClass('d-none');

        // ‚úÖ ACTUALIZAR CARRITO, SERVICIOS Y TOTALES
        actualizarVistaCarrito();
        actualizarTotales();
        actualizarEstadoBotonFinalizar();

        console.log('üîÑ Interfaz actualizada con datos de la proforma (productos y servicios)');

        // Cerrar modal de proformas
        const modalProformas = bootstrap.Modal.getInstance(document.getElementById('proformasModal'));
        if (modalProformas) {
            modalProformas.hide();
        }

        // Guardar referencia a la proforma original para el proceso de facturaci√≥n
        window.proformaOriginalParaConversion = {
            proformaId: proforma.facturaId || proforma.id || proforma.proformaId,
            facturaId: proforma.facturaId || proforma.id || proforma.proformaId,
            numeroProforma: proforma.numeroFactura
        };

        console.log('üìã Referencia de proforma guardada:', window.proformaOriginalParaConversion);
        console.log('üìã ID que se usar√°:', window.proformaOriginalParaConversion.proformaId);

        // ‚úÖ MOSTRAR MODAL DE FINALIZAR VENTA DESPU√âS DE UN BREVE DELAY
        setTimeout(() => {
            console.log('üéØ === ABRIENDO MODAL FINALIZAR VENTA ===');
            console.log('üéØ Productos en carrito:', productosEnVenta.length);
            console.log('üéØ Servicios en carrito:', serviciosEnVenta.length);
            console.log('üéØ Cliente seleccionado:', clienteSeleccionado?.nombre);

            // ‚úÖ VERIFICAR QUE TENEMOS AL MENOS PRODUCTOS O SERVICIOS
            const tieneItems = productosEnVenta.length > 0 || serviciosEnVenta.length > 0;

            if (tieneItems && clienteSeleccionado) {
                mostrarModalFinalizarVenta();
                console.log('‚úÖ Modal de finalizar venta mostrado correctamente');
            } else {
                console.error('‚ùå No se puede mostrar modal - faltan datos');
                console.error('‚ùå Productos:', productosEnVenta.length);
                console.error('‚ùå Servicios:', serviciosEnVenta.length);
                console.error('‚ùå Cliente:', !!clienteSeleccionado);

                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'No se pudieron cargar los datos de la proforma correctamente',
                    confirmButtonColor: '#dc3545'
                });
            }
        }, 800); // Delay de 800ms para asegurar que todo est√© cargado

    } catch (error) {
        console.error('‚ùå Error convirtiendo proforma:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error al convertir',
            text: 'No se pudo convertir la proforma: ' + (error.message || 'Error desconocido'),
            confirmButtonColor: '#dc3545'
        });
    }
}
