async function convertirProformaAFactura(proformaEscapada) {
    try {
        console.log('üîÑ === CONVIRTIENDO PROFORMA A FACTURA ===');
        console.log('üîÑ Proforma escapada recibida:', proformaEscapada);

        // ‚úÖ DESERIALIZAR DATOS DE LA PROFORMA (igual que facturas pendientes)
        const proforma = JSON.parse(proformaEscapada.replace(/&quot;/g, '"'));
        console.log('üîÑ Proforma deserializada:', proforma);

        const confirmacion = await Swal.fire({
            title: '¬øConvertir proforma a factura?',
            html: `
                <div class="text-start">
                    <p><strong>Proforma:</strong> ${proforma.numeroFactura}</p>
                    <p><strong>Cliente:</strong> ${proforma.nombreCliente}</p>
                    <p><strong>Total:</strong> ‚Ç°${formatearMoneda(proforma.total)}</p>
                    <hr>
                    <p><strong>Esta acci√≥n:</strong></p>
                    <ul>
                        <li>Cargar√° los productos de la proforma en el carrito</li>
                        <li>Procesar√° la venta directamente</li>
                        <li>Crear√° una factura oficial inmediatamente</li>
                    </ul>
                    <div class="alert alert-warning mt-3">
                        <strong>Nota:</strong> La proforma original se marcar√° como "Convertida" 
                        despu√©s de crear la factura exitosamente.
                    </div>
                </div>
            `,
            icon: 'question',
            showCancelButton: true,
            confirmButtonColor: '#28a745',
            cancelButtonColor: '#6c757d',
            confirmButtonText: 'S√≠, convertir',
            cancelButtonText: 'Cancelar'
        });

        if (!confirmacion.isConfirmed) {
            return;
        }

        // ‚úÖ VERIFICAR QUE LA PROFORMA EST√â VIGENTE
        if (proforma.estado !== 'Vigente') {
            Swal.fire({
                icon: 'warning',
                title: 'Proforma no vigente',
                text: `Solo se pueden convertir proformas vigentes. Estado actual: ${proforma.estado}`,
                confirmButtonColor: '#ffc107'
            });
            return;
        }

        // ‚úÖ LIMPIAR CARRITO ACTUAL
        productosEnVenta = [];
        clienteSeleccionado = null;

        // ‚úÖ CARGAR CLIENTE DE LA PROFORMA (mismo patr√≥n que facturas pendientes)
        clienteSeleccionado = {
            clienteId: proforma.clienteId,
            nombre: proforma.nombreCliente,
            identificacion: proforma.identificacionCliente,
            telefono: proforma.telefonoCliente,
            email: proforma.emailCliente,
            direccion: proforma.direccionCliente
        };

        // ‚úÖ CARGAR PRODUCTOS DE LA PROFORMA (mismo patr√≥n que facturas pendientes)
        if (proforma.detallesFactura && proforma.detallesFactura.length > 0) {
            proforma.detallesFactura.forEach(detalle => {
                const producto = {
                    productoId: detalle.productoId,
                    nombreProducto: detalle.nombreProducto,
                    precioUnitario: detalle.precioUnitario,
                    cantidad: detalle.cantidad,
                    stockDisponible: detalle.stockDisponible || 999,
                    metodoPago: 'efectivo',
                    imagenUrl: null
                };

                productosEnVenta.push(producto);
                console.log('üîÑ Producto cargado:', producto.nombreProducto, 'x', producto.cantidad);
            });
        }

        // ‚úÖ ACTUALIZAR INTERFAZ
        $('#clienteBusqueda').val(clienteSeleccionado.nombre);
        $('#nombreClienteSeleccionado').text(clienteSeleccionado.nombre);
        $('#emailClienteSeleccionado').text(clienteSeleccionado.email || 'Sin email');
        $('#clienteSeleccionado').removeClass('d-none');

        actualizarVistaCarrito();
        actualizarTotales();
        actualizarEstadoBotonFinalizar();

        // ‚úÖ CERRAR MODAL DE PROFORMAS SI EST√Å ABIERTO
        const modalProformas = bootstrap.Modal.getInstance(document.getElementById('proformasModal'));
        if (modalProformas) {
            modalProformas.hide();
        }

        // ‚úÖ GUARDAR REFERENCIA A LA PROFORMA ORIGINAL
        window.proformaOriginalParaConversion = {
            proformaId: proforma.facturaId,
            numeroProforma: proforma.numeroFactura
        };

        // ‚úÖ LLAMAR DIRECTAMENTE A PROCESAR VENTA FINAL CON EL N√öMERO DE PROFORMA
        console.log('üîÑ Llamando a procesarVentaFinal con n√∫mero de proforma:', proforma.numeroFactura);
        await procesarVentaFinal(proforma.numeroFactura);

        console.log('‚úÖ Proforma convertida exitosamente');

    } catch (error) {
        console.error('‚ùå Error convirtiendo proforma:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error al convertir',
            text: 'No se pudo convertir la proforma: ' + error.message,
            confirmButtonColor: '#dc3545'
        });
    }
}
