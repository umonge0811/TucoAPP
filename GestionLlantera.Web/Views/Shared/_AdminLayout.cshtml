@using GestionLlantera.Web.ViewComponents
@using Microsoft.AspNetCore.Mvc.ViewComponents
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
    <title>@ViewData["Title"] - Panel Administrativo</title>

    @* Estilos base *@
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

    @* Componentes *@
    <link rel="stylesheet" href="~/css/components/spinner.css" />
    <link rel="stylesheet" href="~/css/components/navbar.css" />

    @* Estilos específicos del admin *@
    <link rel="stylesheet" href="~/css/views/admin/AdminLayout.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/views/admin/dashboard.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/views/admin/usuarios.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/views/admin/rolesPermisos.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/views/admin/inventario.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/views/admin/agregarProducto.css" asp-append-version="true" />



    @* Librerías de terceros *@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">

    @* Token antiforgery para las llamadas AJAX *@
    <meta name="csrf-token" content="@Html.AntiForgeryToken()">
</head>


<body class="admin-body">
    <div class="admin-wrapper">
        @* Sidebar *@
        <aside class="admin-sidebar d-none d-lg-flex">
            <div class="sidebar-header">
                <h3>Panel Admin</h3>
            </div>
            <nav class="sidebar-nav">
                <ul class="nav flex-column">
                    <li class="nav-item">
                        <a class="nav-link @(ViewContext.RouteData.Values["Controller"].ToString() == "Dashboard" ? "active" : "")"
                           asp-controller="Dashboard"
                           asp-action="Index">
                            <i class="bi bi-speedometer2"></i> Dashboard
                        </a>
                    </li>
                    @* <!-- INVENTARIOS --> *@
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="collapse" href="#inventarioMenu">
                            <i class="bi bi-box-seam"></i> Inventario
                        </a>
                        <div class="collapse submenu" id="inventarioMenu">
                            <ul class="nav flex-column">
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Inventario" asp-action="Index">
                                        <i class="bi bi-list-ul"></i> Ver Productos
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Inventario" asp-action="AgregarProducto">
                                        <i class="bi bi-plus-lg"></i> Agregar Producto
                                    </a>
                                </li>
                                <a class="nav-link" asp-controller="Inventario" asp-action="ProgramarInventario">
                                    <i class="bi bi-calendar-check"></i>
                                    Programar Inventario
                                </a>
                            </ul>
                        </div>
                    </li>

                    <li class="nav-item">
                                           @if (User.IsInRole("Administrador")) @* <!-- Solo muestra esta sección si el usuario tiene el rol Admin --> *@
                        {
                            <a class="nav-link" data-bs-toggle="collapse" href="#configMenu">
                                <i class="bi bi-gear"></i> Configuración
                            </a>
                            <div class="collapse submenu" id="configMenu">
                                <ul class="nav flex-column">
                                    <li class="nav-item">
                                        <a class="nav-link" asp-controller="Configuracion" asp-action="RolesPermisos">
                                            <i class="bi bi-shield-check"></i> Roles y Permisos
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" asp-controller="Usuarios" asp-action="Index">
                                            <i class="bi bi-people"></i> Gestión de Usuarios
                                        </a>
                                    </li>
                                </ul>
                            </div>
                        }
                    </li>
                </ul>

                @* Usuarios Conectados *@
                <div class="online-users-section mt-auto">
                    <button class="online-users-toggle" type="button" data-bs-toggle="offcanvas" data-bs-target="#usersPanel">
                        <div class="d-flex align-items-center gap-2">
                            <i class="bi bi-circle-fill text-success"></i>
                            <span>Usuarios Conectados (4)</span>
                        </div>
                        <i class="bi bi-chevron-up"></i>
                    </button>
                </div>
            </nav>
        </aside>

        @* Contenido Principal *@
        <main class="admin-main">
            @* Navbar Mobile *@
            <nav class="admin-navbar-mobile d-lg-none">
                <button class="btn btn-icon" type="button" data-bs-toggle="offcanvas" data-bs-target="#mobileSidebar">
                    <i class="bi bi-list"></i>
                </button>
                <div class="brand">Panel Admin</div>
                <div class="actions">
                    @await Component.InvokeAsync("Notificaciones")
                    <div class="dropdown">
                        <button class="btn btn-icon" type="button" data-bs-toggle="dropdown">
                            <i class="bi bi-person-circle"></i>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li>
                                <div class="dropdown-header">
                                    <div class="fw-bold">@User.Identity?.Name</div>
                                    <div class="text-muted small">Administrador</div>
                                </div>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                                <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#newAnnouncementModal">
                                    <i class="bi bi-megaphone me-2"></i>Crear Anuncio
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="#">
                                    <i class="bi bi-person me-2"></i>Mi Perfil
                                </a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="#">
                                    <i class="bi bi-gear me-2"></i>Configuración
                                </a>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                                <a class="dropdown-item text-danger" asp-controller="Account" asp-action="Logout">
                                    <i class="bi bi-box-arrow-right me-2"></i>Cerrar Sesión
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </nav>

            @* Navbar Desktop *@
            <nav class="admin-navbar d-none d-lg-flex">
                <div class="container-fluid d-flex justify-content-end">
                    <div class="d-flex align-items-center gap-3">

                        @await Component.InvokeAsync("Notificaciones")

                        <div class="dropdown">
                            <button class="btn dropdown-toggle user-dropdown" type="button" data-bs-toggle="dropdown">
                                <div class="d-flex align-items-center gap-2">
                                    <div class="user-avatar">
                                        <i class="bi bi-person-circle"></i>
                                    </div>
                                    @await Component.InvokeAsync("UserInfo")
                                </div>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end">
                                <li>
                                    <div class="dropdown-header">
                                        @await Component.InvokeAsync("UserInfo")
                                    </div>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <a class="dropdown-item" href="#" data-bs-toggle="modal" data-bs-target="#newAnnouncementModal">
                                        <i class="bi bi-megaphone me-2"></i>Crear Anuncio
                                    </a>
                                </li>
                                <li>
                                    <a class="dropdown-item" href="#">
                                        <i class="bi bi-person me-2"></i>Mi Perfil
                                    </a>
                                </li>
                                <li>
                                    <a class="dropdown-item" href="#">
                                        <i class="bi bi-gear me-2"></i>Configuración
                                    </a>
                                </li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <a class="dropdown-item text-danger" asp-controller="Account" asp-action="Logout">
                                        <i class="bi bi-box-arrow-right me-2"></i>Cerrar Sesión
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </nav>

            <div class="admin-content">
                @RenderBody()
            </div>
        </main>
    </div>

    @* Mobile Sidebar *@
    <div class="offcanvas offcanvas-start" tabindex="-1" id="mobileSidebar">
        <div class="offcanvas-header sidebar-header">
            <h3>Panel Admin</h3>
            <button type="button" class="btn-close btn-close-white" data-bs-dismiss="offcanvas"></button>
        </div>
        <div class="offcanvas-body p-0">
            <nav class="sidebar-nav">
                <ul class="nav flex-column">
                    <li class="nav-item">
                        <a class="nav-link @(ViewContext.RouteData.Values["Controller"].ToString() == "Dashboard" ? "active" : "")"
                           asp-controller="Dashboard"
                           asp-action="Index">
                            <i class="bi bi-speedometer2"></i> Dashboard
                        </a>
                    </li>
                    <!-- INVENTARIOS, en la sección del mobileSidebar -->

                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="collapse" href="#inventarioMenuMobile">
                            <i class="bi bi-box-seam"></i> Inventario
                        </a>
                        <div class="collapse submenu" id="inventarioMenuMobile">
                            <ul class="nav flex-column">
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Inventario" asp-action="Index">
                                        <i class="bi bi-list-ul"></i> Ver Productos
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Inventario" asp-action="AgregarProducto">
                                        <i class="bi bi-plus-lg"></i> Agregar Producto
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" asp-controller="Inventario" asp-action="Programaciones">
                                        <i class="bi bi-calendar-check"></i> Inventarios Programados
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </li>
                        <!-- En _AdminLayout.cshtml, en la sección del mobileSidebar -->
                    <li class="nav-item">
                            @if (User.IsInRole("Administrador"))
                            {
                            <a class="nav-link" data-bs-toggle="collapse" href="#configMenuMobile">
                                <i class="bi bi-gear"></i> Configuración
                            </a>
                            <div class="collapse submenu" id="configMenuMobile">
                                <ul class="nav flex-column">
                                    <li class="nav-item">
                                        <a class="nav-link" asp-controller="Configuracion" asp-action="RolesPermisos">
                                            <i class="bi bi-shield-check"></i> Roles y Permisos
                                        </a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link" asp-controller="Usuarios" asp-action="Index">
                                            <i class="bi bi-people"></i> Gestión de Usuarios
                                        </a>
                                    </li>
                                </ul>
                            </div>
                            }
                    </li>
                    
                </ul>
            </nav>
        </div>
    </div>

    @* Panel de Notificaciones *@
    <div class="offcanvas offcanvas-end" tabindex="-1" id="notificationsPanel" aria-labelledby="notificationsPanelLabel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title" id="notificationsPanelLabel">
                <i class="bi bi-bell me-2"></i>
                Notificaciones
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
        </div>
        <div class="offcanvas-body">
            <!-- ✅ CONTENIDO SIMPLIFICADO -->
            <div id="notificaciones-contenido">
                <div class="text-center py-3">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Cargando...</span>
                    </div>
                    <p class="mt-2 text-muted">Cargando notificaciones...</p>
                </div>
            </div>

            <div class="text-center mt-4">
                <button class="btn btn-outline-primary btn-sm" onclick="cargarNotificaciones()">
                    <i class="bi bi-arrow-clockwise me-1"></i>
                    Actualizar
                </button>
            </div>
        </div>
    </div>

@* Panel de Usuarios Conectados *@
    <div class="offcanvas offcanvas-bottom" tabindex="-1" id="usersPanel">
        <div class="offcanvas-header">
            <h5 class="offcanvas-title">
                <i class="bi bi-circle-fill text-success me-2"></i>
                Usuarios Conectados
            </h5>
            <button type="button" class="btn-close" data-bs-dismiss="offcanvas"></button>
        </div>
        <div class="offcanvas-body">
            <div class="connected-users-list">
                <div class="user-item">
                    <div class="user-avatar">CM</div>
                    <div class="user-info">
                        <div class="user-name">Carlos Mora</div>
                        <div class="user-role">Vendedor</div>
                        <div class="user-status">Activo hace 5 min</div>
                    </div>
                </div>
                <div class="user-item">
                    <div class="user-avatar">MR</div>
                    <div class="user-info">
                        <div class="user-name">María Rodríguez</div>
                        <div class="user-role">Admin</div>
                        <div class="user-status">Activo hace 2 min</div>
                    </div>
                </div>
                <div class="user-item">
                    <div class="user-avatar">JG</div>
                    <div class="user-info">
                        <div class="user-name">Juan González</div>
                        <div class="user-role">Técnico</div>
                        <div class="user-status">Activo hace 10 min</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @* Modal Nuevo Anuncio *@
    <div class="modal fade" id="newAnnouncementModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Nuevo Anuncio</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="newAnnouncementForm">
                        <div class="mb-3">
                            <label class="form-label">Título</label>
                            <input type="text" class="form-control" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Contenido</label>
                            <textarea class="form-control" rows="3" required></textarea>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Importancia</label>
                            <select class="form-select">
                                <option value="info">Informativo</option>
                                <option value="warning">Importante</option>
                                <option value="danger">Urgente</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Fecha de Vencimiento</label>
                            <input type="date" class="form-control">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" form="newAnnouncementForm" class="btn btn-primary">Publicar</button>
                </div>
            </div>
        </div>
    </div>

    @* Scripts *@
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/utils/buttonUtils.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    @await RenderSectionAsync("Scripts", required: false)

    <script>
        // Variables globales para notificaciones
        let notificacionesCache = [];
        let conteoNoLeidas = 0;

        // Función para cargar notificaciones
        async function cargarNotificaciones() {
            try {
                const response = await fetch('/api/notificaciones/mis-notificaciones');
                if (response.ok) {
                    notificacionesCache = await response.json();
                    renderizarNotificaciones();
                }
            } catch (error) {
                console.error('Error al cargar notificaciones:', error);
                mostrarErrorNotificaciones();
            }
        }

        // Función para cargar conteo
        async function cargarConteoNotificaciones() {
            try {
                const response = await fetch('/api/notificaciones/conteo-no-leidas');
                if (response.ok) {
                    conteoNoLeidas = await response.json();
                    actualizarBadges();
                }
            } catch (error) {
                console.error('Error al cargar conteo:', error);
            }
        }

        // Función para renderizar notificaciones
        function renderizarNotificaciones() {
            const contenedor = document.getElementById('notificaciones-contenido');

            if (!notificacionesCache || notificacionesCache.length === 0) {
                contenedor.innerHTML = `
                    <div class="text-center py-5">
                        <i class="bi bi-bell-slash" style="font-size: 3rem; color: #dee2e6;"></i>
                        <h6 class="mt-3 text-muted">No tienes notificaciones</h6>
                        <p class="text-muted small">Cuando recibas notificaciones aparecerán aquí.</p>
                    </div>
                `;
                return;
            }

            let html = '';

            if (conteoNoLeidas > 0) {
                html += `
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <small class="text-muted">Tienes ${conteoNoLeidas} notificaciones no leídas</small>
                        <button type="button" class="btn btn-sm btn-outline-primary" onclick="marcarTodasComoLeidas()">
                            Marcar todas como leídas
                        </button>
                    </div>
                `;
            }

            html += '<div class="notifications-list">';

            notificacionesCache.slice(0, 20).forEach(notificacion => {
                const tipoClass = obtenerClaseTipo(notificacion.tipo);
                const icono = notificacion.icono || obtenerIconoPorDefecto(notificacion.tipo);

                html += `
                    <div class="notification-item ${!notificacion.leida ? 'unread' : ''}"
                         data-notification-id="${notificacion.notificacionId}"
                         onclick="manejarClickNotificacion(${notificacion.notificacionId}, '${notificacion.urlAccion || ''}')"
                         style="cursor: pointer;">

                        <div class="notification-icon ${tipoClass}">
                            <i class="${icono}"></i>
                        </div>

                        <div class="notification-content">
                            <div class="d-flex justify-content-between align-items-start">
                                <div class="notification-title">${notificacion.titulo}</div>
                                ${!notificacion.leida ? '<span class="unread-indicator bg-primary rounded-circle" style="width: 8px; height: 8px;"></span>' : ''}
                            </div>
                            <p class="notification-text">${notificacion.mensaje}</p>
                            <div class="notification-time">${notificacion.tiempoTranscurrido}</div>
                        </div>
                    </div>
                `;
            });

            html += '</div>';

            if (notificacionesCache.length > 20) {
                html += `
                    <div class="text-center mt-3">
                        <small class="text-muted">Mostrando 20 de ${notificacionesCache.length} notificaciones</small>
                    </div>
                `;
            }

            contenedor.innerHTML = html;
        }

        // Función para mostrar error
        function mostrarErrorNotificaciones() {
            const contenedor = document.getElementById('notificaciones-contenido');
            contenedor.innerHTML = `
                <div class="text-center py-3">
                    <i class="bi bi-exclamation-triangle text-warning" style="font-size: 2rem;"></i>
                    <p class="mt-2 text-muted">Error al cargar notificaciones</p>
                    <button class="btn btn-sm btn-outline-primary" onclick="cargarNotificaciones()">
                        Reintentar
                    </button>
                </div>
            `;
        }

        // Función para actualizar badges
        function actualizarBadges() {
            const badges = document.querySelectorAll('.notification-badge');
            badges.forEach(badge => {
                if (conteoNoLeidas > 0) {
                    badge.textContent = conteoNoLeidas > 99 ? '99+' : conteoNoLeidas.toString();
                    badge.style.display = '';
                } else {
                    badge.style.display = 'none';
                }
            });
        }

        // Función para obtener clase de tipo
        function obtenerClaseTipo(tipo) {
            switch(tipo) {
                case 'success': return 'bg-success';
                case 'warning': return 'bg-warning';
                case 'danger': return 'bg-danger';
                case 'info': return 'bg-info';
                default: return 'bg-primary';
            }
        }

        // Función para obtener ícono por defecto
        function obtenerIconoPorDefecto(tipo) {
            switch(tipo) {
                case 'success': return 'bi bi-check-circle';
                case 'warning': return 'bi bi-exclamation-triangle';
                case 'danger': return 'bi bi-x-circle';
                case 'info': return 'bi bi-info-circle';
                default: return 'bi bi-bell';
            }
        }

        // Función para obtener token CSRF
        function getCSRFToken() {
            return document.querySelector('meta[name="csrf-token"]')?.getAttribute('content') || '';
        }

        // Función para marcar como leída
        async function marcarNotificacionComoLeida(notificacionId) {
            try {
                const response = await fetch(`/api/notificaciones/${notificacionId}/marcar-leida`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCSRFToken()
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        // Actualizar cache local
                        const notificacion = notificacionesCache.find(n => n.notificacionId === notificacionId);
                        if (notificacion) {
                            notificacion.leida = true;
                        }

                        // Actualizar conteo
                        conteoNoLeidas = Math.max(0, conteoNoLeidas - 1);
                        actualizarBadges();
                        renderizarNotificaciones();
                    }
                }
            } catch (error) {
                console.error('Error al marcar notificación como leída:', error);
            }
        }

        // Función para marcar todas como leídas
        async function marcarTodasComoLeidas() {
            try {
                const response = await fetch('/api/notificaciones/marcar-todas-leidas', {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': getCSRFToken()
                    }
                });

                if (response.ok) {
                    const result = await response.json();
                    if (result.success) {
                        // Actualizar cache local
                        notificacionesCache.forEach(n => n.leida = true);
                        conteoNoLeidas = 0;
                        actualizarBadges();
                        renderizarNotificaciones();
                    }
                }
            } catch (error) {
                console.error('Error al marcar todas como leídas:', error);
            }
        }

        // Función para manejar click en notificación
        function manejarClickNotificacion(notificacionId, urlAccion) {
            // Marcar como leída
            marcarNotificacionComoLeida(notificacionId);

            // Cerrar el panel
            const offcanvas = bootstrap.Offcanvas.getInstance(document.getElementById('notificationsPanel'));
            if (offcanvas) {
                offcanvas.hide();
            }

            // Navegar si tiene URL de acción
            if (urlAccion && urlAccion !== 'null' && urlAccion.trim() !== '') {
                setTimeout(() => {
                    window.location.href = urlAccion;
                }, 200);
            }
        }

        // Cargar notificaciones cuando se abre el panel
        document.addEventListener('DOMContentLoaded', function() {
            // Cargar conteo inicial
            cargarConteoNotificaciones();

            // Cargar notificaciones cuando se abre el panel
            const notificationsPanel = document.getElementById('notificationsPanel');
            if (notificationsPanel) {
                notificationsPanel.addEventListener('show.bs.offcanvas', function() {
                    cargarNotificaciones();
                });
            }

            // Actualizar conteo cada 30 segundos
            setInterval(cargarConteoNotificaciones, 30000);
        });
    </script>
</body>
</html>