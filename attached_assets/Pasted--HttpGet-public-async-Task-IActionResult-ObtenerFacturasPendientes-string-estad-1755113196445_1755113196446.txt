
        [HttpGet]
        public async Task<IActionResult> ObtenerFacturasPendientes(string estado = "Pendiente", int tamano = 1000)
        {
            try
            {
                _logger.LogInformation("📋 Solicitud de facturas desde el controlador Web - Estado: {Estado}", estado);

                var token = this.ObtenerTokenJWT();
                if (string.IsNullOrEmpty(token))
                {
                    return Json(new { success = false, message = "Sesión expirada" });
                }

                var resultado = await _facturacionService.ObtenerFacturasAsync(token, estado, tamano);

                _logger.LogInformation("📋 Resultado del servicio: Success={Success}, Message={Message}",
                    resultado.success, resultado.message);

                if (resultado.success && resultado.data != null)
                {
                    _logger.LogInformation("📋 Procesando respuesta del API de facturas");

                    // El servicio ya procesa la respuesta del API y devuelve la estructura correcta
                    return Json(resultado.data);
                }
                else
                {
                    _logger.LogWarning("📋 No se pudieron obtener las facturas: {Message}", resultado.message);
                    return Json(new
                    {
                        success = false,
                        message = resultado.message ?? "No se pudieron obtener las facturas",
                        facturas = new List<object>(),
                        totalFacturas = 0
                    });
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "❌ Error crítico obteniendo facturas");
                return Json(new
                {
                    success = false,
                    message = "Error interno del servidor",
                    facturas = new List<object>(),
                    totalFacturas = 0
                });
            }
        }