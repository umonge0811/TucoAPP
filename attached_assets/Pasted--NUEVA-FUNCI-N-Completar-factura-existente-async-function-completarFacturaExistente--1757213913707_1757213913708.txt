/**
 * ‚úÖ NUEVA FUNCI√ìN: Completar factura existente
 */
async function completarFacturaExistente(facturaId) {
    try {
        console.log('üí∞ === COMPLETANDO FACTURA EXISTENTE ===');
        console.log('üí∞ Factura ID:', facturaId);
        console.log('üí∞ Es pago m√∫ltiple:', esPagoMultiple);
        console.log('üí∞ Detalles de pago:', detallesPagoActuales);

        const metodoPagoSeleccionado = esPagoMultiple ? 'Multiple' : ($('input[name="metodoPago"]:checked').val() || 'efectivo');

        // ‚úÖ DATOS COMPLETOS Y VALIDADOS PARA EL CONTROLADOR (SOLO FACTURAS PENDIENTES)
        const datosCompletamiento = {
            facturaId: parseInt(facturaId), // Asegurar que sea n√∫mero
            metodoPago: metodoPagoSeleccionado,
            observaciones: $('#observacionesVenta').val() || '',
            forzarVerificacionStock: false,
            esProforma: false // Esta funci√≥n solo maneja facturas pendientes
        };

        // ‚úÖ AGREGAR DETALLES DE PAGO SOLO SI ES PAGO M√öLTIPLE
        if (esPagoMultiple && detallesPagoActuales && detallesPagoActuales.length > 0) {
            datosCompletamiento.detallesPago = detallesPagoActuales.map(pago => ({
                metodoPago: pago.metodoPago,
                monto: pago.monto,
                referencia: pago.referencia || '',
                observaciones: pago.observaciones || '',
                fechaPago: new Date().toISOString()
            }));
            console.log('üí∞ Detalles de pago m√∫ltiple agregados:', datosCompletamiento.detallesPago);
        }

        console.log('üìã Datos de completamiento para factura pendiente:', datosCompletamiento);

        const response = await fetch('/Facturacion/CompletarFactura', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            },
            body: JSON.stringify(datosCompletamiento),
            credentials: 'include'
        });

        const result = await response.json();

        if (result.success) {
            console.log('‚úÖ Factura completada exitosamente:', result);

            // ‚úÖ PRESERVAR INFORMACI√ìN COMPLETA DE FACTURA ANTES DE PROCESAR
            console.log('üìã === PRESERVANDO INFORMACI√ìN DE FACTURA PARA RECIBO ===');
            if (facturaPendienteActual) {
                window.facturaParaRecibo = {
                    numeroFactura: facturaPendienteActual.numeroFactura || `FAC-${facturaId}`,
                    nombreCliente: facturaPendienteActual.nombreCliente ||
                        facturaPendienteActual.NombreCliente ||
                        clienteSeleccionado?.nombre ||
                        clienteSeleccionado?.nombreCliente ||
                        'Cliente General',
                    usuarioCreadorNombre: facturaPendienteActual.usuarioCreadorNombre ||
                        facturaPendienteActual.UsuarioCreadorNombre ||
                        obtenerUsuarioActual()?.nombre ||
                        'Sistema'
                };
                console.log('üìã Informaci√≥n preservada:', window.facturaParaRecibo);
            }

            // ‚úÖ REGISTRAR PRODUCTOS PENDIENTES SI EXISTEN
            if (window.productosPendientesEntrega && window.productosPendientesEntrega.length > 0) {
                console.log('üì¶ === REGISTRANDO PRODUCTOS PENDIENTES DESPU√âS DE COMPLETAR FACTURA ===');
                console.log('üì¶ Productos pendientes:', window.productosPendientesEntrega);
                console.log('üì¶ Factura completada ID:', facturaId);

                await registrarProductosPendientesEntrega(facturaId, window.productosPendientesEntrega);
            }

            // ‚úÖ GUARDAR PRODUCTOS ACTUALES ANTES DE LIMPIAR PARA EL RECIBO
            const productosParaRecibo = [...productosEnVenta];

            // ‚úÖ CERRAR MODAL INMEDIATAMENTE
            modalFinalizarVenta.hide();

            // ‚úÖ GENERAR E IMPRIMIR RECIBO ANTES DE LIMPIAR CON DATOS COMPLETOS
            console.log('üñ®Ô∏è Llamando a generarReciboFacturaCompletada con:', {
                result: result,
                productos: productosParaRecibo.length,
                metodoPago: metodoPagoSeleccionado,
                facturaPendiente: facturaPendienteActual,
                esPagoMultiple: esPagoMultiple,
                detallesPago: detallesPagoActuales
            });

            generarReciboFacturaCompletada(result, productosParaRecibo, metodoPagoSeleccionado);

            // ‚úÖ LIMPIAR CARRITO COMPLETAMENTE
            productosEnVenta = [];
            clienteSeleccionado = null;
            facturaPendienteActual = null; // ‚úÖ LIMPIAR FACTURA PENDIENTE
            $('#clienteBusqueda').val('');
            $('#clienteSeleccionado').addClass('d-none');
            actualizarVistaCarrito();
            actualizarTotales();
            actualizarEstadoBotonFinalizar();

            // ‚úÖ LIMPIAR VARIABLES DE PRODUCTOS PENDIENTES
            if (window.productosPendientesEntrega) {
                delete window.productosPendientesEntrega;
            }
            if (window.facturaConPendientes) {
                delete window.facturaConPendientes;
            }

            // ‚úÖ LIMPIAR ESTADO DE B√öSQUEDA PARA FORZAR ACTUALIZACI√ìN
            window.lastProductsHash = null;
            ultimaBusqueda = '';
            busquedaEnProceso = false;
            cargaInicialCompletada = false;

            // ‚úÖ ACTUALIZAR VISTA DE PRODUCTOS
            await actualizarVistaProductosPostAjuste();

            // ‚úÖ MOSTRAR SWEETALERT DE CONFIRMACI√ìN
            Swal.fire({
                icon: 'success',
                title: '¬°Factura Completada!',
                text: `La factura ha sido completada exitosamente y marcada como pagada`,
                confirmButtonText: 'Continuar',
                confirmButtonColor: '#28a745',
                timer: 4000,
                timerProgressBar: true,
                showConfirmButton: true
            });

        } else {
            throw new Error(result.message || 'Error al completar la factura');
        }

    } catch (error) {
        console.error('‚ùå Error completando factura existente:', error);
        throw error;
    }
}
