// ===== GESTI√ìN DE SERVICIOS =====

/**
 * ‚úÖ FUNCI√ìN: Abrir modal de servicios
 */
async function abrirModalServicios() {
    try {
        console.log('üõ†Ô∏è === ABRIENDO MODAL DE SERVICIOS ===');

        const modal = new bootstrap.Modal(document.getElementById('modalServicios'));

        // Configurar evento para cuando el modal sea completamente visible
        $('#modalServicios').on('shown.bs.modal', async function () {
            console.log('üõ†Ô∏è Modal de servicios completamente visible');
            
            // Cargar tipos de servicios para el filtro
            await cargarTiposServicios();
            
            // Configurar eventos de filtros
            configurarEventosServicios();
            
            // Cargar servicios iniciales
            await cargarServicios();
        });

        modal.show();

    } catch (error) {
        console.error('‚ùå Error abriendo modal de servicios:', error);
        mostrarToast('Error', 'No se pudo abrir el modal de servicios', 'danger');
    }
}

/**
 * ‚úÖ FUNCI√ìN: Cargar tipos de servicios para filtro
 */
async function cargarTiposServicios() {
    try {
        const response = await fetch('/api/servicios/tipos', {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'Content-Type': 'application/json'
            },
            credentials: 'include'
        });

        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }

        const tipos = await response.json();
        const select = $('#tipoServicioFiltro');
        
        // Limpiar opciones existentes excepto la primera
        select.find('option:not(:first)').remove();
        
        // Agregar tipos
        tipos.forEach(tipo => {
            select.append(`<option value="${tipo}">${tipo}</option>`);
        });

    } catch (error) {
        console.error('‚ùå Error cargando tipos de servicios:', error);
    }
}

/**
 * ‚úÖ FUNCI√ìN: Configurar eventos de los filtros de servicios
 */
function configurarEventosServicios() {
    let timeoutBusqueda = null;

    // Limpiar eventos anteriores
    $('#busquedaServicios').off('input.servicios');
    $('#tipoServicioFiltro').off('change.servicios');
    $('#estadoServicioFiltro').off('change.servicios');

    // B√∫squeda con debounce
    $('#busquedaServicios').on('input.servicios', function () {
        clearTimeout(timeoutBusqueda);
        timeoutBusqueda = setTimeout(() => {
            cargarServicios();
        }, 300);
    });

    // Filtros
    $('#tipoServicioFiltro, #estadoServicioFiltro').on('change.servicios', function () {
        cargarServicios();
    });
}

/**
 * ‚úÖ FUNCI√ìN: Cargar servicios con filtros
 */
async function cargarServicios() {
    try {
        console.log('üõ†Ô∏è === CARGANDO SERVICIOS ===');

        // Mostrar loading
        $('#serviciosLoading').show();
        $('#serviciosContent').hide();
        $('#serviciosEmpty').hide();

        // Obtener valores de filtros
        const busqueda = $('#busquedaServicios').val().trim();
        const tipoServicio = $('#tipoServicioFiltro').val();
        const estadoFiltro = $('#estadoServicioFiltro').val();
        
        const soloActivos = estadoFiltro === 'activos';

        // Construir URL con par√°metros
        const params = new URLSearchParams({
            busqueda: busqueda,
            tipoServicio: tipoServicio,
            soloActivos: soloActivos
        });

        const response = await fetch('/Servicios/ObtenerServicios', {
                   method: 'GET',
                   headers: {
                       'X-Requested-With': 'XMLHttpRequest'
                   }
               });

        if (!response.ok) {
            throw new Error(`Error HTTP: ${response.status}`);
        }

        const servicios = await response.json();
        console.log('üõ†Ô∏è Servicios obtenidos:', servicios.length);

        if (servicios && servicios.length > 0) {
            mostrarServicios(servicios, estadoFiltro);
        } else {
            mostrarServiciosVacios();
        }

    } catch (error) {
        console.error('‚ùå Error cargando servicios:', error);
        mostrarServiciosVacios();
        mostrarToast('Error', 'Error al cargar servicios: ' + error.message, 'danger');
    } finally {
        $('#serviciosLoading').hide();
    }
}

/**
 * ‚úÖ FUNCI√ìN: Mostrar servicios en la tabla
 */
function mostrarServicios(servicios, estadoFiltro) {
    console.log('üõ†Ô∏è Mostrando servicios:', servicios.length);

    const tbody = $('#serviciosTableBody');
    tbody.empty();

    // Filtrar por estado en el frontend si es necesario
    let serviciosFiltrados = servicios;
    if (estadoFiltro === 'activos') {
        serviciosFiltrados = servicios.filter(s => s.estaActivo);
    } else if (estadoFiltro === 'inactivos') {
        serviciosFiltrados = servicios.filter(s => !s.estaActivo);
    }

    serviciosFiltrados.forEach(servicio => {
        const estadoBadge = servicio.estaActivo ? 
            '<span class="badge bg-success">Activo</span>' : 
            '<span class="badge bg-secondary">Inactivo</span>';

        // Escapar datos del servicio
        const servicioEscapado = JSON.stringify(servicio).replace(/"/g, '&quot;');

        const fila = `
            <tr data-servicio-id="${servicio.servicioId}" class="servicio-row">
                <td>
                    <strong class="text-primary">${servicio.nombreServicio}</strong>
                    ${servicio.descripcion ? `<br><small class="text-muted">${servicio.descripcion}</small>` : ''}
                </td>
                <td>
                    <span class="badge bg-info">${servicio.tipoServicio || 'General'}</span>
                </td>
                <td class="text-end">
                    <strong class="text-success">‚Ç°${formatearMoneda(servicio.precioBase)}</strong>
                </td>
                <td class="text-center">
                    ${estadoBadge}
                </td>
                <td class="text-center">
                    ${servicio.estaActivo ? `
                        <button type="button" 
                                class="btn btn-sm btn-success btn-agregar-servicio"
                                data-servicio-escapado="${servicioEscapado}"
                                title="Agregar al carrito">
                            <i class="bi bi-cart-plus"></i>
                        </button>
                    ` : `
                        <button type="button" 
                                class="btn btn-sm btn-secondary" 
                                disabled
                                title="Servicio inactivo">
                            <i class="bi bi-x-circle"></i>
                        </button>
                    `}
                </td>
            </tr>
        `;
        tbody.append(fila);
    });

    // Configurar eventos de los botones
    $('.btn-agregar-servicio').on('click', function () {
        const servicioEscapado = $(this).data('servicio-escapado');
        mostrarModalAgregarServicio(servicioEscapado);
    });

    $('#serviciosContent').show();
}

/**
 * ‚úÖ FUNCI√ìN: Mostrar mensaje cuando no hay servicios
 */
function mostrarServiciosVacios() {
    $('#serviciosContent').hide();
    $('#serviciosEmpty').show();
}

/**
 * ‚úÖ FUNCI√ìN: Mostrar modal para agregar servicio al carrito
 */
function mostrarModalAgregarServicio(servicioEscapado) {
    try {
        console.log('üõ†Ô∏è === MOSTRANDO MODAL AGREGAR SERVICIO ===');
        
        const servicio = JSON.parse(servicioEscapado.replace(/&quot;/g, '"'));
        console.log('üõ†Ô∏è Servicio seleccionado:', servicio);

        // Llenar detalles del servicio
        const detalleHtml = `
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title text-primary">
                        <i class="bi bi-tools me-2"></i>${servicio.nombreServicio}
                    </h5>
                    ${servicio.descripcion ? `
                        <p class="card-text text-muted">${servicio.descripcion}</p>
                    ` : ''}
                    <div class="row">
                        <div class="col-6">
                            <strong>Tipo:</strong><br>
                            <span class="badge bg-info">${servicio.tipoServicio || 'General'}</span>
                        </div>
                        <div class="col-6">
                            <strong>Precio Base:</strong><br>
                            <span class="text-success fs-5 fw-bold">‚Ç°${formatearMoneda(servicio.precioBase)}</span>
                        </div>
                    </div>
                    ${servicio.observaciones ? `
                        <div class="mt-2">
                            <strong>Observaciones:</strong><br>
                            <small class="text-muted">${servicio.observaciones}</small>
                        </div>
                    ` : ''}
                </div>
            </div>
        `;

        $('#detalleServicioSeleccionado').html(detalleHtml);

        // Resetear campos
        $('#cantidadServicio').val(1);
        $('#observacionesServicio').val('');

        // Configurar eventos del modal
        configurarEventosModalAgregarServicio(servicio);

        // Mostrar modal
        const modal = new bootstrap.Modal(document.getElementById('modalAgregarServicio'));
        modal.show();

    } catch (error) {
        console.error('‚ùå Error mostrando modal agregar servicio:', error);
        mostrarToast('Error', 'No se pudo procesar el servicio seleccionado', 'danger');
    }
}

/**
 * ‚úÖ FUNCI√ìN: Configurar eventos del modal agregar servicio
 */
function configurarEventosModalAgregarServicio(servicio) {
    // Limpiar eventos anteriores
    $('#btnMenosCantidadServicio').off('click.modalServicio');
    $('#btnMasCantidadServicio').off('click.modalServicio');
    $('#cantidadServicio').off('input.modalServicio');
    $('#btnConfirmarAgregarServicio').off('click.modalServicio');

    // Botones de cantidad
    $('#btnMenosCantidadServicio').on('click.modalServicio', function () {
        const input = $('#cantidadServicio');
        const valorActual = parseInt(input.val()) || 1;
        if (valorActual > 1) {
            input.val(valorActual - 1);
        }
    });

    $('#btnMasCantidadServicio').on('click.modalServicio', function () {
        const input = $('#cantidadServicio');
        const valorActual = parseInt(input.val()) || 1;
        if (valorActual < 10) {
            input.val(valorActual + 1);
        }
    });

    // Validaci√≥n del input
    $('#cantidadServicio').on('input.modalServicio', function () {
        const valor = parseInt($(this).val()) || 1;
        if (valor < 1) {
            $(this).val(1);
        } else if (valor > 10) {
            $(this).val(10);
        }
    });

    // Confirmar agregar servicio
    $('#btnConfirmarAgregarServicio').one('click.modalServicio', function () {
        const $boton = $(this);
        if ($boton.prop('disabled')) {
            return;
        }

        $boton.prop('disabled', true);
        $boton.html('<span class="spinner-border spinner-border-sm me-2"></span>Agregando...');

        const cantidad = parseInt($('#cantidadServicio').val()) || 1;
        const observaciones = $('#observacionesServicio').val().trim();

        try {
            agregarServicioAVenta(servicio, cantidad, observaciones);
            
            // Cerrar modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('modalAgregarServicio'));
            modal.hide();

            mostrarToast('Servicio agregado', `${servicio.nombreServicio} agregado a la venta`, 'success');

        } catch (error) {
            console.error('‚ùå Error agregando servicio:', error);
            mostrarToast('Error', 'No se pudo agregar el servicio', 'danger');
        } finally {
            $boton.prop('disabled', false);
            $boton.html('<i class="bi bi-cart-plus me-1"></i>Agregar al Carrito');
        }
    });
}

/**
 * ‚úÖ FUNCI√ìN: Agregar servicio al carrito de venta
 */
function agregarServicioAVenta(servicio, cantidad = 1, observaciones = '') {
    console.log('üõ†Ô∏è === AGREGANDO SERVICIO A VENTA ===');
    console.log('üõ†Ô∏è Servicio:', servicio.nombreServicio);
    console.log('üõ†Ô∏è Cantidad:', cantidad);
    console.log('üõ†Ô∏è Observaciones:', observaciones);

    // Verificar si el servicio ya est√° en la venta
    const servicioExistente = productosEnVenta.find(p => 
        p.esServicio && p.servicioId === servicio.servicioId
    );

    if (servicioExistente) {
        // Incrementar cantidad
        servicioExistente.cantidad += cantidad;
        if (observaciones) {
            servicioExistente.observaciones = observaciones;
        }
        console.log('üõ†Ô∏è Cantidad de servicio incrementada');
    } else {
        // Agregar nuevo servicio
        const servicioVenta = {
            servicioId: servicio.servicioId,
            nombreProducto: servicio.nombreServicio, // Usar el mismo campo que productos
            descripcion: servicio.descripcion || '',
            precioUnitario: servicio.precioBase,
            cantidad: cantidad,
            observaciones: observaciones,
            metodoPago: 'efectivo',
            esServicio: true, // Flag para identificar que es un servicio
            tipoServicio: servicio.tipoServicio || 'General',
            imagenUrl: null
        };

        productosEnVenta.push(servicioVenta);
        console.log('üõ†Ô∏è Nuevo servicio agregado al carrito');
    }

    // Actualizar vistas
    actualizarVistaCarrito();
    actualizarTotales();
    actualizarEstadoBotonFinalizar();
}
