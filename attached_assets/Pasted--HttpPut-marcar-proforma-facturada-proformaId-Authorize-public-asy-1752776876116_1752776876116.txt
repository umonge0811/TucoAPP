        [HttpPut("marcar-proforma-facturada/{proformaId}")]
        [Authorize]
        public async Task<IActionResult> MarcarProformaComoFacturada(int proformaId, [FromBody] ConvertirProformaRequest request)
        {
            var validacionPermiso = await this.ValidarPermisoAsync(_permisosService, "Crear Facturas",
                "Solo usuarios con permiso 'Crear Facturas' pueden convertir proformas");
            if (validacionPermiso != null) return validacionPermiso;

            try
            {
                var proforma = await _context.Facturas.FindAsync(proformaId);
                if (proforma == null)
                    return NotFound(new { success = false, message = "Proforma no encontrada" });

                if (proforma.TipoDocumento != "Proforma")
                    return BadRequest(new { success = false, message = "El documento no es una proforma" });

                if (proforma.Estado != "Vigente")
                    return BadRequest(new { success = false, message = "Solo se pueden convertir proformas vigentes" });

                // Marcar como facturada
                proforma.Estado = "Facturada";
                proforma.FechaActualizacion = DateTime.Now;
                proforma.Observaciones = (proforma.Observaciones ?? "") + 
                    $" | CONVERTIDA A FACTURA: {request.NumeroFacturaGenerada} el {DateTime.Now:dd/MM/yyyy HH:mm}";

                await _context.SaveChangesAsync();

                _logger.LogInformation("üîÑ Proforma {NumeroProforma} marcada como facturada (conversi√≥n a factura {NumeroFactura})", 
                    proforma.NumeroFactura, request.NumeroFacturaGenerada);

                return Ok(new
                {
                    success = true,
                    message = "Proforma marcada como facturada exitosamente",
                    numeroProforma = proforma.NumeroFactura,
                    numeroFacturaGenerada = request.NumeroFacturaGenerada,
                    estadoAnterior = "Vigente",
                    estadoNuevo = "Facturada",
                    fechaActualizacion = proforma.FechaActualizacion,
                    timestamp = DateTime.Now
                });
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error marcando proforma como facturada: {ProformaId}", proformaId);
                return StatusCode(500, new { 
                    success = false, 
                    message = "Error interno al marcar proforma como facturada" 
                });
            }
        }
