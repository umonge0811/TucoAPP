
using GestionLlantera.Web.Models;
using GestionLlantera.Web.Models.DTOs;
using GestionLlantera.Web.Models.ViewModels;
using GestionLlantera.Web.Services.Interfaces;
using Tuco.Clases.DTOs;
using Tuco.Clases.Models.Password;

namespace GestionLlantera.Web.Services
{
    /// <summary>
    /// Servicio para gestionar autenticaci√≥n, activaci√≥n y recuperaci√≥n de contrase√±as
    /// Utiliza ApiConfigurationService para URLs centralizadas
    /// </summary>
    public class AuthService : IAuthService
    {
        private readonly IHttpClientFactory _clientFactory;
        private readonly IConfiguration _configuration;
        private readonly ILogger<AuthService> _logger;
        private readonly ApiConfigurationService _apiConfig;

        /// <summary>
        /// Constructor con inyecci√≥n del servicio de configuraci√≥n centralizado
        /// </summary>
        public AuthService(
            IHttpClientFactory clientFactory,
            IConfiguration configuration,
            ILogger<AuthService> logger,
            ApiConfigurationService apiConfig)
        {
            _clientFactory = clientFactory;
            _configuration = configuration;
            _logger = logger;
            _apiConfig = apiConfig;
        }

        /// <summary>
        /// ‚úÖ OPERACI√ìN: Autenticar usuario con email y contrase√±a
        /// Utiliza URL centralizada desde appsettings.json
        /// </summary>
        /// <param name="model">Datos de login del usuario</param>
        /// <returns>Resultado de autenticaci√≥n con token JWT si es exitoso</returns>
        public async Task<(bool Success, string? Token, string? ErrorMessage)> LoginAsync(LoginViewModel model)
        {
            try
            {
                // ‚úÖ CONFIGURACI√ìN: Crear cliente HTTP con configuraci√≥n centralizada
                var client = _clientFactory.CreateClient("APIClient");
                
                // ‚úÖ URL CENTRALIZADA: Construir endpoint usando servicio de configuraci√≥n
                var url = _apiConfig.GetApiUrl("auth/login");
                _logger.LogInformation($"üåê URL construida: {url}");
                
                // ‚úÖ PETICI√ìN: Enviar credenciales al endpoint de autenticaci√≥n
                var response = await client.PostAsJsonAsync(url, new
                {
                    email = model.Email,
                    contrasena = model.Contrasena
                });

                // ‚úÖ PROCESAMIENTO: Verificar respuesta exitosa
                if (response.IsSuccessStatusCode)
                {
                    // ‚úÖ DESERIALIZACI√ìN: Obtener token JWT de la respuesta
                    var result = await response.Content.ReadFromJsonAsync<LoginResponseDTO>();
                    return (true, result?.Token, null);
                }

                // ‚úÖ MANEJO DE ERRORES: Procesar respuesta de error
                var error = await response.Content.ReadAsStringAsync();
                _logger.LogWarning("Error en el login: {Error}", error);
                return (false, null, "Credenciales inv√°lidas");
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG DE EXCEPCI√ìN: Registrar error inesperado
                _logger.LogError(ex, "Error al intentar hacer login");
                return (false, null, "Error al intentar iniciar sesi√≥n");
            }
        }

        /// <summary>
        /// ‚úÖ OPERACI√ìN: Verificar si el usuario est√° activo y el token no ha expirado
        /// Utiliza URL centralizada desde appsettings.json
        /// </summary>
        /// <param name="token">Token de verificaci√≥n del usuario</param>
        /// <returns>Estado de activaci√≥n y expiraci√≥n del token</returns>
        public async Task<(bool activo, bool expirado)> CheckUsuarioActivo(string token)
        {
            try
            {
                // ‚úÖ CONFIGURACI√ìN: Crear cliente HTTP con configuraci√≥n centralizada
                var client = _clientFactory.CreateClient("APIClient");
                
                // ‚úÖ URL CENTRALIZADA: Construir endpoint de verificaci√≥n
                var url = _apiConfig.GetApiUrl($"auth/check-usuario-activo?token={token}");
                _logger.LogInformation($"üåê URL construida: {url}");
                
                // ‚úÖ PETICI√ìN: Verificar estado del usuario
                var response = await client.GetAsync(url);

                // ‚úÖ PROCESAMIENTO: Analizar respuesta del servidor
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<UsuarioActivoDTO>();
                    return (result.Active, result.TokenExpirado);
                }

                // ‚úÖ DEFAULT: Retornar usuario inactivo con token expirado si hay error
                return (false, true);
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG DE EXCEPCI√ìN: Registrar error de verificaci√≥n
                _logger.LogError(ex, "Error al verificar estado de usuario");
                throw;
            }
        }

        /// <summary>
        /// ‚úÖ OPERACI√ìN: Activar cuenta de usuario usando token de activaci√≥n
        /// Utiliza URL centralizada desde appsettings.json
        /// </summary>
        /// <param name="token">Token de activaci√≥n enviado por email</param>
        /// <returns>Resultado de la activaci√≥n</returns>
        public async Task<bool> ActivarCuenta(string token)
        {
            try
            {
                // ‚úÖ CONFIGURACI√ìN: Crear cliente HTTP con configuraci√≥n centralizada
                var client = _clientFactory.CreateClient("APIClient");
                
                // ‚úÖ URL CENTRALIZADA: Construir endpoint de activaci√≥n
                var url = _apiConfig.GetApiUrl($"auth/activar-cuenta?token={token}");
                _logger.LogInformation($"üåê URL construida: {url}");
                
                // ‚úÖ PETICI√ìN: Solicitar activaci√≥n de cuenta
                var response = await client.GetAsync(url);

                // ‚úÖ PROCESAMIENTO: Verificar activaci√≥n exitosa
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<Tuco.Clases.DTOs.ActivationResponseDTO>();
                    
                    // ‚úÖ VALIDACI√ìN: Verificar que se recibi√≥ token v√°lido
                    if (result?.Token != null)
                    {
                        // ‚úÖ NOTA: Token disponible para cambio de contrase√±a posterior
                        return true;
                    }
                }

                return false;
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG DE EXCEPCI√ìN: Registrar error de activaci√≥n
                _logger.LogError(ex, "Error al activar cuenta");
                throw;
            }
        }

        /// <summary>
        /// ‚úÖ OPERACI√ìN: Solicitar regeneraci√≥n de token de activaci√≥n/recuperaci√≥n
        /// Utiliza URL centralizada desde appsettings.json
        /// </summary>
        /// <param name="token">Token actual para regenerar</param>
        /// <returns>Resultado de la regeneraci√≥n</returns>
        public async Task<bool> RegenerarToken(string token)
        {
            try
            {
                // ‚úÖ CONFIGURACI√ìN: Crear cliente HTTP con configuraci√≥n centralizada
                var client = _clientFactory.CreateClient("APIClient");
                
                // ‚úÖ URL CENTRALIZADA: Construir endpoint de regeneraci√≥n
                var url = _apiConfig.GetApiUrl("auth/regenerar-token");
                _logger.LogInformation($"üåê URL construida: {url}");
                
                // ‚úÖ PETICI√ìN: Solicitar nuevo token
                var response = await client.PostAsJsonAsync(url, token);

                // ‚úÖ PROCESAMIENTO: Verificar regeneraci√≥n exitosa
                if (response.IsSuccessStatusCode)
                {
                    return true;
                }

                // ‚úÖ LOG DE ADVERTENCIA: Registrar error de regeneraci√≥n
                _logger.LogWarning("Error al regenerar token");
                return false;
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG DE EXCEPCI√ìN: Registrar error inesperado
                _logger.LogError(ex, "Error al regenerar token");
                throw;
            }
        }

        /// <summary>
        /// ‚úÖ OPERACI√ìN: Cambiar contrase√±a durante proceso de activaci√≥n de cuenta
        /// Utiliza URL centralizada desde appsettings.json
        /// </summary>
        /// <param name="token">Token de activaci√≥n v√°lido</param>
        /// <param name="nuevaContrasena">Nueva contrase√±a del usuario</param>
        /// <returns>Resultado del cambio de contrase√±a</returns>
        public async Task<bool> CambiarContrasena(string token, string nuevaContrasena)
        {
            try
            {
                // ‚úÖ LOG INICIAL: Registrar inicio del proceso
                _logger.LogInformation($"Iniciando cambio de contrase√±a. Token: {token}");

                // ‚úÖ CONFIGURACI√ìN: Crear cliente HTTP con configuraci√≥n centralizada
                var client = _clientFactory.CreateClient("APIClient");
                
                // ‚úÖ PREPARACI√ìN: Crear objeto de solicitud
                var request = new CambiarContrasenaRequest
                {
                    Token = token,
                    NuevaContrasena = nuevaContrasena
                };

                // ‚úÖ LOG DE DATOS: Registrar contenido de la solicitud (sin mostrar contrase√±a)
                _logger.LogInformation($"Request Content: Token={request.Token}, NuevaContrasena=[OCULTA]");

                // ‚úÖ URL CENTRALIZADA: Construir endpoint de cambio de contrase√±a
                var url = _apiConfig.GetApiUrl("auth/CambiarContrasenaActivacion");
                _logger.LogInformation($"üåê URL construida: {url}");
                
                // ‚úÖ PETICI√ìN: Enviar solicitud de cambio
                var response = await client.PostAsJsonAsync(url, request);

                // ‚úÖ LOG DETALLADO: Registrar detalles de la respuesta
                var responseContent = await response.Content.ReadAsStringAsync();
                _logger.LogInformation($"Status Code: {response.StatusCode}");
                _logger.LogInformation($"Response Content: {responseContent}");

                // ‚úÖ PROCESAMIENTO: Verificar cambio exitoso
                if (response.IsSuccessStatusCode)
                {
                    _logger.LogInformation("Contrase√±a cambiada exitosamente");
                    return true;
                }

                return false;
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG DE EXCEPCI√ìN: Registrar error del cambio
                _logger.LogError(ex, "Error al cambiar contrase√±a");
                throw;
            }
        }

        /// <summary>
        /// ‚úÖ OPERACI√ìN: Solicitar recuperaci√≥n de contrase√±a por email
        /// Utiliza URL centralizada desde appsettings.json
        /// </summary>
        /// <param name="email">Email del usuario para recuperar contrase√±a</param>
        /// <returns>Resultado de la solicitud de recuperaci√≥n</returns>
        public async Task<bool> SolicitarRecuperacion(string email)
        {
            try
            {
                // ‚úÖ CONFIGURACI√ìN: Crear cliente HTTP con configuraci√≥n centralizada
                var client = _clientFactory.CreateClient("APIClient");
                
                // ‚úÖ URL CENTRALIZADA: Construir endpoint de solicitud de recuperaci√≥n
                var url = _apiConfig.GetApiUrl("auth/solicitar-recuperacion");
                _logger.LogInformation($"üåê URL construida: {url}");
                
                // ‚úÖ PETICI√ìN: Enviar solicitud de recuperaci√≥n
                var response = await client.PostAsJsonAsync(url,
                    new { email = email });

                // ‚úÖ RESULTADO: Retornar √©xito basado en c√≥digo de respuesta
                return response.IsSuccessStatusCode;
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG DE EXCEPCI√ìN: Registrar error de solicitud
                _logger.LogError(ex, "Error al solicitar recuperaci√≥n de contrase√±a");
                return false;
            }
        }

        /// <summary>
        /// ‚úÖ OPERACI√ìN: Restablecer contrase√±a usando token de recuperaci√≥n
        /// Utiliza URL centralizada desde appsettings.json
        /// </summary>
        /// <param name="token">Token de recuperaci√≥n enviado por email</param>
        /// <param name="nuevaContrasena">Nueva contrase√±a del usuario</param>
        /// <returns>Resultado del restablecimiento</returns>
        public async Task<bool> RestablecerContrasena(string token, string nuevaContrasena)
        {
            try
            {
                // ‚úÖ LOG INICIAL: Registrar inicio del restablecimiento
                _logger.LogInformation("Iniciando solicitud de restablecimiento de contrase√±a");

                // ‚úÖ CONFIGURACI√ìN: Crear cliente HTTP con configuraci√≥n centralizada
                var client = _clientFactory.CreateClient("APIClient");
                
                // ‚úÖ PREPARACI√ìN: Crear objeto de solicitud
                var request = new
                {
                    Token = token,
                    NuevaContrasena = nuevaContrasena
                };

                // ‚úÖ URL CENTRALIZADA: Construir endpoint de restablecimiento
                var url = _apiConfig.GetApiUrl("auth/restablecer-contrasena");
                _logger.LogInformation($"üåê URL construida: {url}");
                
                // ‚úÖ PETICI√ìN: Enviar solicitud de restablecimiento
                var response = await client.PostAsJsonAsync(url, request);

                // ‚úÖ LOG DE RESPUESTA: Registrar detalles de la respuesta
                var responseContent = await response.Content.ReadAsStringAsync();
                _logger.LogInformation($"Respuesta del servidor: {response.StatusCode}, Contenido: {responseContent}");

                // ‚úÖ PROCESAMIENTO: Verificar restablecimiento exitoso
                if (response.IsSuccessStatusCode)
                {
                    _logger.LogInformation("Contrase√±a restablecida exitosamente");
                    return true;
                }

                // ‚úÖ LOG DE ADVERTENCIA: Registrar error del restablecimiento
                _logger.LogWarning($"Error al restablecer contrase√±a. StatusCode: {response.StatusCode}");
                return false;
            }
            catch (Exception ex)
            {
                // ‚úÖ LOG DE EXCEPCI√ìN: Registrar error inesperado
                _logger.LogError(ex, "Error al intentar restablecer la contrase√±a");
                return false;
            }
        }
    }
}
