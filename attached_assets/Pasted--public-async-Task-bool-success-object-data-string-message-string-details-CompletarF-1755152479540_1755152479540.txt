        public async Task<(bool success, object? data, string? message, string? details)> CompletarFacturaAsync(int facturaId, object datosCompletamiento, string jwtToken = null)
        {
            try
            {
                _logger.LogInformation("‚úÖ Completando documento ID: {FacturaId}", facturaId);
                _logger.LogInformation("üìã Datos de completamiento: {Datos}", JsonConvert.SerializeObject(datosCompletamiento));

                // Configurar token JWT si se proporciona
                if (!string.IsNullOrEmpty(jwtToken))
                {
                    _httpClient.DefaultRequestHeaders.Clear();
                    _httpClient.DefaultRequestHeaders.Authorization =
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", jwtToken);
                }

                // ‚úÖ EXTRAER INFORMACI√ìN PARA DETERMINAR EL ENDPOINT
                dynamic datos = JsonConvert.DeserializeObject(JsonConvert.SerializeObject(datosCompletamiento));
                bool esProforma = datos?.esProforma == true;

                string endpoint;
                string tipoDocumento;

                if (esProforma)
                {
                    // ‚úÖ PARA PROFORMAS: Usar servicio centralizado
                    endpoint = _apiConfig.GetApiUrl($"Facturacion/proformas/{facturaId}/marcar-facturada");
                    tipoDocumento = "Proforma";
                    _logger.LogInformation("üìã Marcando proforma como facturada usando endpoint: {Endpoint}", endpoint);
                }
                else
                {
                    // ‚úÖ PARA FACTURAS: Usar servicio centralizado
                    endpoint = _apiConfig.GetApiUrl($"Facturacion/facturas/{facturaId}/completar");
                    tipoDocumento = "Factura";
                    _logger.LogInformation("üìã Completando factura usando endpoint: {Endpoint}", endpoint);
                }

                var jsonContent = JsonConvert.SerializeObject(datosCompletamiento, new JsonSerializerSettings
                {
                    ContractResolver = new Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver(),
                    DateFormatString = "yyyy-MM-ddTHH:mm:ss",
                    NullValueHandling = NullValueHandling.Include
                });

                _logger.LogInformation("üì§ JSON enviado al API: {Json}", jsonContent);

                var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");

                // ‚úÖ USAR PUT PARA AMBOS CASOS (COMPLETAR Y MARCAR COMO FACTURADA)
                var response = await _httpClient.PutAsync(endpoint, content);
                var responseContent = await response.Content.ReadAsStringAsync();

                _logger.LogInformation("üì• Respuesta del API: {StatusCode} - {Content}", response.StatusCode, responseContent);

                if (response.IsSuccessStatusCode)
                {
                    var resultado = JsonConvert.DeserializeObject(responseContent);
                    return (success: true, data: resultado, message: $"{tipoDocumento} procesada exitosamente", details: null);
                }
                else
                {
                    _logger.LogError("‚ùå Error procesando {TipoDocumento}: {StatusCode} - {Content}",
                        tipoDocumento, response.StatusCode, responseContent);
                    return (success: false, data: null, message: $"Error al procesar {tipoDocumento.ToLower()}", details: responseContent);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "‚ùå Error procesando documento");
                return (success: false, data: null, message: "Error interno: " + ex.Message, details: ex.ToString());
            }
        }
